diff --git a/BUILD.bazel b/BUILD.bazel
new file mode 100644
index 0000000..4483145
--- /dev/null
+++ b/BUILD.bazel
@@ -0,0 +1,11 @@
+load("@boost.rules.tools//:tools.bzl", "boost_library")
+
+boost_library(
+    name = "endian",
+    deps = [
+        "@boost.config//:config",
+        "@boost.core//:core",
+        "@boost.static_assert//:static_assert",
+        "@boost.type_traits//:type_traits",
+    ],
+)
diff --git a/MODULE.bazel b/MODULE.bazel
new file mode 100755
index 0000000..b2d168d
--- /dev/null
+++ b/MODULE.bazel
@@ -0,0 +1,12 @@
+module(
+    name = "boost.endian",
+    version = "1.83.0.bcr.1",
+    compatibility_level = 1,
+)
+
+bazel_dep(name = "boost.rules.tools", version = "1.0.0")
+bazel_dep(name = "platforms", version = "0.0.8")
+bazel_dep(name = "boost.config", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.core", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.static_assert", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.type_traits", version = "1.83.0.bcr.1")
diff --git a/WORKSPACE.bazel b/WORKSPACE.bazel
new file mode 100644
index 0000000..be0754f
--- /dev/null
+++ b/WORKSPACE.bazel
@@ -0,0 +1 @@
+# SEE: MODULE.bazel
diff --git a/bazel_test/BUILD.bazel b/bazel_test/BUILD.bazel
new file mode 100644
index 0000000..278e1e6
--- /dev/null
+++ b/bazel_test/BUILD.bazel
@@ -0,0 +1,16 @@
+load("@boost.rules.tools//:tools.bzl", "boost_test_set")
+
+DEPS = [
+    "@boost.endian//:endian",
+]
+
+test_suite(
+    name = "tests",
+    tests = boost_test_set(
+        file_extensions = ".cc",
+        names = [
+            "endian",
+        ],
+        deps = DEPS,
+    ),
+)
diff --git a/bazel_test/endian.cc b/bazel_test/endian.cc
new file mode 100644
index 0000000..c802405
--- /dev/null
+++ b/bazel_test/endian.cc
@@ -0,0 +1,64 @@
+// #include <boost/array.hpp>
+
+// int main()
+// {
+//   boost::array<int, 3> a{};
+//   return a[0];
+// }
+
+#include <iostream>
+#include <cstdio>
+#include <boost/endian/arithmetic.hpp>
+#include <boost/static_assert.hpp>
+
+using namespace boost::endian;
+
+namespace {
+    struct header {
+        big_int32_t file_code;
+        big_int32_t file_length;
+        little_int32_t version;
+        little_int32_t shape_type;
+    };
+
+    const char* filename = "test.dat";
+}
+
+int main(int argc, char** argv) {
+    header h;
+
+    BOOST_STATIC_ASSERT(sizeof(h) == 16U);  // reality check
+    
+    h.file_code   = 0x01020304;
+    h.file_length = sizeof(header);
+    h.version     = 1;
+    h.shape_type  = 0x01020304;
+
+    //  Low-level I/O such as POSIX read/write or <cstdio>
+    //  fread/fwrite is sometimes used for binary file operations
+    //  when ultimate efficiency is important. Such I/O is often
+    //  performed in some C++ wrapper class, but to drive home the
+    //  point that endian integers are often used in fairly
+    //  low-level code that does bulk I/O operations, <cstdio>
+    //  fopen/fwrite is used for I/O in this example.
+
+    std::FILE* fi = std::fopen(filename, "wb");  // MUST BE BINARY
+    
+    if (!fi)
+    {
+        std::cout << "could not open " << filename << '\n';
+        return 1;
+    }
+
+    if (std::fwrite(&h, sizeof(header), 1, fi)!= 1)
+    {
+        std::cout << "write failure for " << filename << '\n';
+        return 1;
+    }
+
+    std::fclose(fi);
+
+    std::cout << "created file " << filename << '\n';
+
+    return 0;
+}
\ No newline at end of file
