diff --git a/.gitignore b/.gitignore
index 2f86751..59aea6b 100644
--- a/.gitignore
+++ b/.gitignore
@@ -9,7 +9,7 @@ stdcerr
 .vscode
 
 # CMake
-/*build*
+build/
 /cmake-build-debug/
 /cmake-build-release/
 /CMakeSettings.json
diff --git a/BUILD.bazel b/BUILD.bazel
new file mode 100644
index 0000000..de66f51
--- /dev/null
+++ b/BUILD.bazel
@@ -0,0 +1,39 @@
+# Hey there! Before you start modifying this file, go check out https://github.com/dynacondev/boost.rules.tools for the tool you need!
+
+load("@boost.rules.tools//:tools.bzl", "boost_library")
+
+boost_library(
+    name = "geometry",
+    deps = [
+        "@boost//:algorithm",
+        "@boost//:any",
+        "@boost//:array",
+        "@boost//:assert",
+        "@boost//:concept_check",
+        "@boost//:config",
+        "@boost//:container",
+        "@boost//:core",
+        "@boost//:function_types",
+        "@boost//:fusion",
+        "@boost//:integer",
+        "@boost//:iterator",
+        "@boost//:lexical_cast",
+        "@boost//:math",
+        "@boost//:mpl",
+        "@boost//:multiprecision",
+        "@boost//:numeric.conversion",
+        "@boost//:polygon",
+        "@boost//:qvm",
+        "@boost//:range",
+        "@boost//:rational",
+        "@boost//:serialization",
+        "@boost//:static_assert",
+        "@boost//:thread",
+        "@boost//:throw_exception",
+        "@boost//:tokenizer",
+        "@boost//:tuple",
+        "@boost//:type_traits",
+        "@boost//:variant",
+        "@boost//:variant2",
+    ],
+)
diff --git a/MODULE.bazel b/MODULE.bazel
new file mode 100755
index 0000000..13c38ae
--- /dev/null
+++ b/MODULE.bazel
@@ -0,0 +1,14 @@
+"""
+Hey there! Before editing, check out the tool at https://github.com/dynacondev/boost.rules.tools
+Note: These modules follow a circular dependency structure on the boost module https://github.com/dynacondev/boost.rules to keep boost releases from mixing!
+"""
+
+module(
+    name = "boost.geometry",
+    version = "1.83.0.bcr.1",
+    compatibility_level = 1,
+)
+
+bazel_dep(name = "boost", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.rules.tools", version = "1.0.0")
+bazel_dep(name = "platforms", version = "0.0.8")
diff --git a/WORKSPACE.bazel b/WORKSPACE.bazel
new file mode 100644
index 0000000..be0754f
--- /dev/null
+++ b/WORKSPACE.bazel
@@ -0,0 +1 @@
+# SEE: MODULE.bazel
diff --git a/bazel_test/BUILD.bazel b/bazel_test/BUILD.bazel
new file mode 100644
index 0000000..33128b3
--- /dev/null
+++ b/bazel_test/BUILD.bazel
@@ -0,0 +1,16 @@
+load("@boost.rules.tools//:tools.bzl", "boost_test_set")
+
+DEPS = [
+    "@boost//:geometry",
+]
+
+test_suite(
+    name = "tests",
+    tests = boost_test_set(
+        file_extensions = ".cc",
+        names = [
+            "geometry_test",
+        ],
+        deps = DEPS,
+    ),
+)
diff --git a/bazel_test/geometry_test.cc b/bazel_test/geometry_test.cc
new file mode 100644
index 0000000..a32e2a0
--- /dev/null
+++ b/bazel_test/geometry_test.cc
@@ -0,0 +1,26 @@
+#include <vector>
+
+#include <boost/geometry.hpp>
+#include <boost/geometry/geometries/point.hpp>
+#include <boost/geometry/geometries/box.hpp>
+#include <boost/geometry/index/rtree.hpp>
+
+
+namespace bg = boost::geometry;
+namespace bgi = boost::geometry::index;
+
+int
+main() {
+  typedef bg::model::point<float, 2, bg::cs::cartesian> point;
+  typedef bg::model::box<point> box;
+  typedef std::pair<box, unsigned> value;
+  bgi::rtree< value, bgi::quadratic<16> > rtree;
+  for (unsigned i = 0 ; i < 10 ; ++i) {
+    box b(point(i + 0.0f, i + 0.0f), point(i + 0.5f, i + 0.5f));
+    rtree.insert(std::make_pair(b, i));
+  }
+  box query_box(point(0, 0), point(5, 5));
+  std::vector<value> result_s;
+  rtree.query(bgi::intersects(query_box), std::back_inserter(result_s));
+  return result_s.size() == 5;
+}
