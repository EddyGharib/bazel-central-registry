diff --git a/BUILD.bazel b/BUILD.bazel
new file mode 100644
index 0000000..c0a635c
--- /dev/null
+++ b/BUILD.bazel
@@ -0,0 +1,89 @@
+load("@bazel_skylib//lib:selects.bzl", "selects")
+load("@bazel_skylib//rules:common_settings.bzl", "bool_flag")
+# Hey there! Before you start modifying this file, go check out https://github.com/dynacondev/boost.rules.tools for the tool you need!
+
+load("@boost.rules.tools//:tools.bzl", "boost_library")
+
+bool_flag(
+    name = "asio_disable_epoll",
+    build_setting_default = False,
+)
+
+config_setting(
+    name = "asio_no_epoll",
+    flag_values = {
+        ":asio_disable_epoll": "True",
+    },
+)
+
+bool_flag(
+    name = "asio_has_io_uring",
+    build_setting_default = False,
+)
+
+config_setting(
+    name = "asio_io_uring",
+    flag_values = {
+        ":asio_has_io_uring": "True",
+    },
+)
+
+boost_library(
+    name = "asio",
+    srcs = [
+        "//:build_asio.cpp",
+    ],
+    defines = [
+        "BOOST_ASIO_SEPARATE_COMPILATION",
+    ] + selects.with_or({
+        ("@platforms//os:osx", "@platforms//os:ios", "@platforms//os:watchos", "@platforms//os:tvos"): [
+            "BOOST_ASIO_DISABLE_STD_EXPERIMENTAL_STRING_VIEW",
+        ],
+        "//conditions:default": [],
+    }) + select({
+        ":asio_no_epoll": ["BOOST_ASIO_DISABLE_EPOLL"],
+        "//conditions:default": [],
+    }) + select({
+        ":asio_io_uring": ["BOOST_ASIO_HAS_IO_URING"],
+        "//conditions:default": [],
+    }),
+    linkopts = select({
+        "@platforms//os:android": [],
+        "//conditions:default": ["-lpthread"],
+    }) + select({
+        ":asio_io_uring": ["-luring"],
+        "//conditions:default": [],
+    }),
+    deps = [
+        "@boost//:align",
+        "@boost//:array",
+        "@boost//:assert",
+        "@boost//:bind",
+        "@boost//:chrono",
+        "@boost//:config",
+        "@boost//:context",
+        "@boost//:core",
+        "@boost//:coroutine",
+        "@boost//:date_time",
+        "@boost//:exception",
+        "@boost//:function",
+        "@boost//:regex",
+        "@boost//:smart_ptr",
+        "@boost//:system",
+        "@boost//:throw_exception",
+        "@boost//:type_traits",
+        "@boost//:utility",
+    ],
+)
+
+# cc_library(
+#     name = "asio_ssl",
+#     srcs = [
+#         "//:build_asio_ssl.cpp",
+#     ],
+#     visibility = ["//visibility:public"],
+#     deps = [
+#         ":asio",
+#         "@boringssl//:ssl",
+#     ],
+# )
diff --git a/MODULE.bazel b/MODULE.bazel
new file mode 100755
index 0000000..5811d9d
--- /dev/null
+++ b/MODULE.bazel
@@ -0,0 +1,34 @@
+"""
+Hey there! Before editing, check out the tool at https://github.com/dynacondev/boost.rules.tools
+Note: These modules follow a circular dependency structure on the boost module https://github.com/dynacondev/boost.rules to keep boost releases from mixing!
+"""
+
+module(
+    name = "boost.asio",
+    version = "1.83.0.bcr.1",
+    compatibility_level = 1,
+)
+
+bazel_dep(name = "boost", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.rules.tools", version = "1.0.0")
+bazel_dep(name = "platforms", version = "0.0.8")
+bazel_dep(name = "bazel_skylib", version = "1.5.0")
+bazel_dep(name = "boringssl", version = "0.0.0-20230215-5c22014")
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
diff --git a/WORKSPACE.bazel b/WORKSPACE.bazel
new file mode 100644
index 0000000..be0754f
--- /dev/null
+++ b/WORKSPACE.bazel
@@ -0,0 +1 @@
+# SEE: MODULE.bazel
diff --git a/build_asio.cpp b/build_asio.cpp
new file mode 100644
index 0000000..0e8f87a
--- /dev/null
+++ b/build_asio.cpp
@@ -0,0 +1,7 @@
+// Per
+// https://www.boost.org/doc/libs/1_72_0/doc/html/boost_asio/using.html#boost_asio.using.optional_separate_compilation,
+// exactly one file in an ASIO project using separate compilation must
+// contain the following #include. See also
+// https://github.com/nelhage/rules_boost/issues/166 and
+// https://github.com/nelhage/rules_boost/issues/170
+#include "boost/asio/impl/src.hpp"
diff --git a/build_asio_ssl.cpp b/build_asio_ssl.cpp
new file mode 100644
index 0000000..d98d7b5
--- /dev/null
+++ b/build_asio_ssl.cpp
@@ -0,0 +1 @@
+#include <boost/asio/ssl/impl/src.hpp>
diff --git a/test/BUILD.bazel b/test/BUILD.bazel
new file mode 100644
index 0000000..a2b602a
--- /dev/null
+++ b/test/BUILD.bazel
@@ -0,0 +1,394 @@
+load("@boost.rules.tools//:tools.bzl", "boost_test_set")
+
+DEPS = [
+    "@boost//:asio",
+]
+
+test_suite(
+    name = "tests",
+    tests = boost_test_set(
+        names = [
+            "execution/any_executor",
+            "execution/blocking_adaptation",
+            "execution/blocking",
+            "execution/bulk_execute",
+            "execution/bulk_guarantee",
+            "execution/connect",
+            "execution/context_as",
+            "execution/execute",
+            "execution/executor",
+            "execution/invocable_archetype",
+            "execution/mapping",
+            "execution/operation_state",
+            "execution/outstanding_work",
+            "execution/prefer_only",
+            "execution/receiver",
+            "execution/relationship",
+            "execution/schedule",
+            "execution/scheduler",
+            "execution/sender",
+            "execution/set_done",
+            "execution/set_error",
+            "execution/set_value",
+            "execution/start",
+            "execution/submit",
+            "experimental/awaitable_operators",
+            "experimental/basic_channel",
+            "experimental/basic_concurrent_channel",
+            "experimental/channel_traits",
+            "experimental/channel",
+            "experimental/co_composed",
+            "experimental/concurrent_channel",
+            "experimental/promise",
+            "experimental/coro/use_coro",
+            "experimental/coro/stack_test",
+            "experimental/coro/simple_test",
+            "experimental/coro/partial",
+            "experimental/coro/executor",
+            "experimental/coro/exception",
+            "experimental/coro/cancel",
+            "experimental/coro/co_spawn",
+            "experimental/coro/allocator",
+            "generic/stream_protocol",
+            "generic/seq_packet_protocol",
+            "generic/raw_protocol",
+            "generic/datagram_protocol",
+            "generic/basic_endpoint",
+            "ip/basic_resolver_query",
+            "ip/address_v4_iterator",
+            "ip/address_v4_range",
+            "ip/address_v4",
+            "ip/address_v6_iterator",
+            "ip/address_v6_range",
+            "ip/address_v6",
+            "ip/address",
+            "ip/basic_endpoint",
+            "ip/basic_resolver_entry",
+            "ip/basic_resolver_iterator",
+            "ip/basic_resolver",
+            "ip/host_name",
+            "ip/icmp",
+            "ip/multicast",
+            "ip/network_v4",
+            "ip/network_v6",
+            "ip/resolver_query_base",
+            "ip/tcp",
+            "ip/udp",
+            "ip/unicast",
+            "ip/v6_only",
+            "latency/udp_server",
+            "latency/udp_client",
+            "latency/tcp_server",
+            "latency/tcp_client",
+            "local/stream_protocol",
+            "local/seq_packet_protocol",
+            "local/datagram_protocol",
+            "local/connect_pair",
+            "local/basic_endpoint",
+            "posix/stream_descriptor",
+            "posix/descriptor",
+            "posix/descriptor_base",
+            "posix/basic_descriptor",
+            "posix/basic_stream_descriptor",
+            "properties/cpp03/can_prefer_free_prefer",
+            "properties/cpp03/can_prefer_free_require",
+            "properties/cpp03/can_prefer_member_prefer",
+            "properties/cpp03/can_prefer_member_require",
+            "properties/cpp03/can_prefer_not_applicable_free_prefer",
+            "properties/cpp03/can_prefer_not_applicable_free_require",
+            "properties/cpp03/can_prefer_not_applicable_member_prefer",
+            "properties/cpp03/can_prefer_not_applicable_member_require",
+            "properties/cpp03/can_prefer_not_applicable_static",
+            "properties/cpp03/can_prefer_not_applicable_unsupported",
+            "properties/cpp03/can_prefer_not_preferable_free_prefer",
+            "properties/cpp03/can_prefer_not_preferable_free_require",
+            "properties/cpp03/can_prefer_not_preferable_member_prefer",
+            "properties/cpp03/can_prefer_not_preferable_member_require",
+            "properties/cpp03/can_prefer_not_preferable_static",
+            "properties/cpp03/can_prefer_not_preferable_unsupported",
+            "properties/cpp03/can_prefer_static",
+            "properties/cpp03/can_prefer_unsupported",
+            "properties/cpp03/can_query_free",
+            "properties/cpp03/can_query_member",
+            "properties/cpp03/can_query_not_applicable_free",
+            "properties/cpp03/can_query_not_applicable_member",
+            "properties/cpp03/can_query_not_applicable_static",
+            "properties/cpp03/can_query_not_applicable_unsupported",
+            "properties/cpp03/can_query_static",
+            "properties/cpp03/can_query_unsupported",
+            "properties/cpp03/can_require_concept_free",
+            "properties/cpp03/can_require_concept_member",
+            "properties/cpp03/can_require_concept_not_applicable_free",
+            "properties/cpp03/can_require_concept_not_applicable_member",
+            "properties/cpp03/can_require_concept_not_applicable_static",
+            "properties/cpp03/can_require_concept_not_applicable_unsupported",
+            "properties/cpp03/can_require_concept_static",
+            "properties/cpp03/can_require_concept_unsupported",
+            "properties/cpp03/can_require_free",
+            "properties/cpp03/can_require_member",
+            "properties/cpp03/can_require_not_applicable_free",
+            "properties/cpp03/can_require_not_applicable_member",
+            "properties/cpp03/can_require_not_applicable_static",
+            "properties/cpp03/can_require_not_applicable_unsupported",
+            "properties/cpp03/can_require_static",
+            "properties/cpp03/can_require_unsupported",
+            "properties/cpp03/prefer_free_prefer",
+            "properties/cpp03/prefer_free_require",
+            "properties/cpp03/prefer_member_prefer",
+            "properties/cpp03/prefer_member_require",
+            "properties/cpp03/prefer_static",
+            "properties/cpp03/prefer_unsupported",
+            "properties/cpp03/query_free",
+            "properties/cpp03/query_member",
+            "properties/cpp03/query_static",
+            "properties/cpp03/require_concept_free",
+            "properties/cpp03/require_concept_member",
+            "properties/cpp03/require_concept_static",
+            "properties/cpp03/require_free",
+            "properties/cpp03/require_member",
+            "properties/cpp03/require_static",
+            "properties/cpp11/can_prefer_member_prefer",
+            "properties/cpp11/can_prefer_free_prefer",
+            "properties/cpp11/can_prefer_free_require",
+            "properties/cpp11/can_prefer_member_require",
+            "properties/cpp11/can_prefer_not_applicable_free_prefer",
+            "properties/cpp11/can_prefer_not_applicable_free_require",
+            "properties/cpp11/can_prefer_not_applicable_member_prefer",
+            "properties/cpp11/can_prefer_not_applicable_member_require",
+            "properties/cpp11/can_prefer_not_applicable_static",
+            "properties/cpp11/can_prefer_not_applicable_unsupported",
+            "properties/cpp11/can_prefer_not_preferable_free_prefer",
+            "properties/cpp11/can_prefer_not_preferable_free_require",
+            "properties/cpp11/can_prefer_not_preferable_member_prefer",
+            "properties/cpp11/can_prefer_not_preferable_member_require",
+            "properties/cpp11/can_prefer_not_preferable_static",
+            "properties/cpp11/can_prefer_not_preferable_unsupported",
+            "properties/cpp11/can_prefer_static",
+            "properties/cpp11/can_prefer_unsupported",
+            "properties/cpp11/can_query_free",
+            "properties/cpp11/can_query_member",
+            "properties/cpp11/can_query_not_applicable_free",
+            "properties/cpp11/can_query_not_applicable_member",
+            "properties/cpp11/can_query_not_applicable_static",
+            "properties/cpp11/can_query_not_applicable_unsupported",
+            "properties/cpp11/can_query_static",
+            "properties/cpp11/can_query_unsupported",
+            "properties/cpp11/can_require_concept_free",
+            "properties/cpp11/can_require_concept_member",
+            "properties/cpp11/can_require_concept_not_applicable_free",
+            "properties/cpp11/can_require_concept_not_applicable_member",
+            "properties/cpp11/can_require_concept_not_applicable_static",
+            "properties/cpp11/can_require_concept_not_applicable_unsupported",
+            "properties/cpp11/can_require_concept_static",
+            "properties/cpp11/can_require_concept_unsupported",
+            "properties/cpp11/can_require_free",
+            "properties/cpp11/can_require_member",
+            "properties/cpp11/can_require_not_applicable_free",
+            "properties/cpp11/can_require_not_applicable_member",
+            "properties/cpp11/can_require_not_applicable_static",
+            "properties/cpp11/can_require_not_applicable_unsupported",
+            "properties/cpp11/can_require_static",
+            "properties/cpp11/can_require_unsupported",
+            "properties/cpp11/prefer_free_prefer",
+            "properties/cpp11/prefer_free_require",
+            "properties/cpp11/prefer_member_prefer",
+            "properties/cpp11/prefer_member_require",
+            "properties/cpp11/prefer_static",
+            "properties/cpp11/prefer_unsupported",
+            "properties/cpp11/query_free",
+            "properties/cpp11/query_member",
+            "properties/cpp11/query_static",
+            "properties/cpp11/require_concept_free",
+            "properties/cpp11/require_concept_member",
+            "properties/cpp11/require_concept_static",
+            "properties/cpp11/require_free",
+            "properties/cpp11/require_member",
+            "properties/cpp11/require_static",
+            "properties/cpp14/can_prefer_not_applicable_static",
+            "properties/cpp14/can_prefer_free_prefer",
+            "properties/cpp14/can_prefer_free_require",
+            "properties/cpp14/can_prefer_member_prefer",
+            "properties/cpp14/can_prefer_member_require",
+            "properties/cpp14/can_prefer_not_applicable_free_prefer",
+            "properties/cpp14/can_prefer_not_applicable_free_require",
+            "properties/cpp14/can_prefer_not_applicable_member_prefer",
+            "properties/cpp14/can_prefer_not_applicable_member_require",
+            "properties/cpp14/can_prefer_not_applicable_unsupported",
+            "properties/cpp14/can_prefer_not_preferable_free_prefer",
+            "properties/cpp14/can_prefer_not_preferable_free_require",
+            "properties/cpp14/can_prefer_not_preferable_member_prefer",
+            "properties/cpp14/can_prefer_not_preferable_member_require",
+            "properties/cpp14/can_prefer_not_preferable_static",
+            "properties/cpp14/can_prefer_not_preferable_unsupported",
+            "properties/cpp14/can_prefer_static",
+            "properties/cpp14/can_prefer_unsupported",
+            "properties/cpp14/can_query_free",
+            "properties/cpp14/can_query_member",
+            "properties/cpp14/can_query_not_applicable_free",
+            "properties/cpp14/can_query_not_applicable_member",
+            "properties/cpp14/can_query_not_applicable_static",
+            "properties/cpp14/can_query_not_applicable_unsupported",
+            "properties/cpp14/can_query_static",
+            "properties/cpp14/can_query_unsupported",
+            "properties/cpp14/can_require_concept_free",
+            "properties/cpp14/can_require_concept_member",
+            "properties/cpp14/can_require_concept_not_applicable_free",
+            "properties/cpp14/can_require_concept_not_applicable_member",
+            "properties/cpp14/can_require_concept_not_applicable_static",
+            "properties/cpp14/can_require_concept_not_applicable_unsupported",
+            "properties/cpp14/can_require_concept_static",
+            "properties/cpp14/can_require_concept_unsupported",
+            "properties/cpp14/can_require_free",
+            "properties/cpp14/can_require_member",
+            "properties/cpp14/can_require_not_applicable_free",
+            "properties/cpp14/can_require_not_applicable_member",
+            "properties/cpp14/can_require_not_applicable_static",
+            "properties/cpp14/can_require_not_applicable_unsupported",
+            "properties/cpp14/can_require_static",
+            "properties/cpp14/can_require_unsupported",
+            "properties/cpp14/prefer_free_prefer",
+            "properties/cpp14/prefer_free_require",
+            "properties/cpp14/prefer_member_prefer",
+            "properties/cpp14/prefer_member_require",
+            "properties/cpp14/prefer_static",
+            "properties/cpp14/prefer_unsupported",
+            "properties/cpp14/query_free",
+            "properties/cpp14/query_member",
+            "properties/cpp14/query_static",
+            "properties/cpp14/require_concept_free",
+            "properties/cpp14/require_concept_member",
+            "properties/cpp14/require_concept_static",
+            "properties/cpp14/require_free",
+            "properties/cpp14/require_member",
+            "properties/cpp14/require_static",
+            "ssl/stream",
+            "ssl/stream_base",
+            "ssl/rfc2818_verification",
+            "ssl/host_name_verification",
+            "ssl/error",
+            "ssl/context",
+            "ssl/context_base",
+            "ts/timer",
+            "ts/netfwd",
+            "ts/socket",
+            "ts/io_context",
+            "ts/net",
+            "ts/executor",
+            "ts/internet",
+            "ts/buffer",
+            "windows/stream_handle",
+            "windows/random_access_handle",
+            "windows/overlapped_ptr",
+            "windows/overlapped_handle",
+            "windows/object_handle",
+            "windows/basic_stream_handle",
+            "windows/basic_random_access_handle",
+            "windows/basic_overlapped_handle",
+            "windows/basic_object_handle",
+            "any_completion_executor",
+            "any_completion_handler",
+            "any_io_executor",
+            "append",
+            "as_tuple",
+            "associated_allocator",
+            "associated_cancellation_slot",
+            "associated_executor",
+            "associated_immediate_executor",
+            "associator",
+            "async_result",
+            "awaitable",
+            "basic_datagram_socket",
+            "basic_deadline_timer",
+            "basic_file",
+            "basic_random_access_file",
+            "basic_raw_socket",
+            "basic_readable_pipe",
+            "basic_seq_packet_socket",
+            "basic_serial_port",
+            "basic_signal_set",
+            "basic_socket_acceptor",
+            "basic_socket",
+            "basic_stream_file",
+            "basic_stream_socket",
+            "basic_streambuf",
+            "basic_waitable_timer",
+            "basic_writable_pipe",
+            "bind_allocator",
+            "bind_cancellation_slot",
+            "bind_executor",
+            "bind_immediate_executor",
+            "buffer_registration",
+            "buffer",
+            "buffered_read_stream",
+            "buffered_stream",
+            "buffered_write_stream",
+            "buffers_iterator",
+            "cancellation_signal",
+            "cancellation_state",
+            "cancellation_type",
+            "co_spawn",
+            "completion_condition",
+            "compose",
+            "connect_pipe",
+            "connect",
+            "consign",
+            "coroutine",
+            "deadline_timer",
+            "defer",
+            "deferred",
+            "detached",
+            "dispatch",
+            "error",
+            "execution_context",
+            "executor_work_guard",
+            "executor",
+            "file_base",
+            "high_resolution_timer",
+            "io_context_strand",
+            "io_context",
+            "is_read_buffered",
+            "is_write_buffered",
+            "packaged_task",
+            "placeholders",
+            "post",
+            "prepend",
+            "random_access_file",
+            "read_at",
+            "read_until",
+            "read",
+            "readable_pipe",
+            "recycling_allocator",
+            "redirect_error",
+            "registered_buffer",
+            "serial_port_base",
+            "serial_port",
+            "signal_set_base",
+            "signal_set",
+            "socket_base",
+            "static_thread_pool",
+            "steady_timer",
+            "strand",
+            "stream_file",
+            "streambuf",
+            "system_context",
+            "system_executor",
+            "system_timer",
+            "this_coro",
+            "thread_pool",
+            "time_traits",
+            "use_awaitable",
+            "use_future",
+            "uses_executor",
+            "wait_traits",
+            "writable_pipe",
+            "write_at",
+            "write",
+        ],
+        deps = DEPS,
+    ) + boost_test_set(
+        expect_fail = True,
+        names = [
+        ],
+        deps = DEPS,
+    ),
+)
