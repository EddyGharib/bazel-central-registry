diff --git a/BUILD.bazel b/BUILD.bazel
new file mode 100644
index 0000000..d23c3fa
--- /dev/null
+++ b/BUILD.bazel
@@ -0,0 +1,10 @@
+# Hey there! Before you start modifying this file, go check out https://github.com/dynacondev/boost.rules.tools for the tool you need!
+
+load("@boost.rules.tools//:tools.bzl", "boost_library")
+
+boost_library(
+    name = "describe",
+    deps = [
+        "@boost//:mp11",
+    ],
+)
diff --git a/MODULE.bazel b/MODULE.bazel
new file mode 100755
index 0000000..6dcdfe8
--- /dev/null
+++ b/MODULE.bazel
@@ -0,0 +1,14 @@
+"""
+Hey there! Before editing, check out the tool at https://github.com/dynacondev/boost.rules.tools
+Note: These modules follow a circular dependency structure on the boost module https://github.com/dynacondev/boost.rules to keep boost releases from mixing!
+"""
+
+module(
+    name = "boost.describe",
+    version = "1.83.0.bcr.1",
+    compatibility_level = 1,
+)
+
+bazel_dep(name = "boost", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.rules.tools", version = "1.0.0")
+bazel_dep(name = "platforms", version = "0.0.8")
diff --git a/WORKSPACE.bazel b/WORKSPACE.bazel
new file mode 100644
index 0000000..be0754f
--- /dev/null
+++ b/WORKSPACE.bazel
@@ -0,0 +1 @@
+# SEE: MODULE.bazel
diff --git a/test/BUILD.bazel b/test/BUILD.bazel
new file mode 100644
index 0000000..3b1dae4
--- /dev/null
+++ b/test/BUILD.bazel
@@ -0,0 +1,67 @@
+load("@boost.rules.tools//:tools.bzl", "boost_test_set")
+
+DEPS = [
+    "@boost//:describe",
+    "@boost//:core",
+]
+
+test_suite(
+    name = "tests",
+    tests = boost_test_set(
+        names = [
+            "bases_test",
+            "class_template_test",
+            "compute_base_modifiers",
+            "describe_cxx14",
+            "descriptor_by_name_test",
+            "descriptor_by_pointer_test",
+            "empty_enum_test",
+            "enum_from_string_test",
+            "enum_to_string_test",
+            "enumerators_test",
+            "has_bases_test",
+            "has_enumerators_test",
+            "has_members_test",
+            "members_test",
+            "members_test2",
+            "members_test3",
+            "members_test4",
+            "members_test5",
+            "members_test6",
+            "members_test7",
+            "members_test8",
+            "nested_enum_test",
+            "operator_eq_test",
+            "operator_lt_test",
+            "overloaded_test",
+            "overloaded_test2",
+            "pedantic_bases_test",
+            "pedantic_enumerators_test",
+            "pedantic_members_test",
+            "pp_call_test",
+            "pp_for_each_test",
+            "pp_is_empty_test",
+            "pp_is_paren_test",
+            "pp_name_test",
+            "pp_parse_test",
+            "pp_pointer_test",
+            "quick",
+            "test_d_type",
+            "trailing_comma_test",
+            "union_test",
+            "union_test2",
+            "unnamed_namespace_test",
+            "unnamed_namespace_test2",
+        ],
+        deps = DEPS,
+    ) + boost_test_set(
+        expect_fail = True,
+        names = [
+            "enum_nested_fail",
+            "enum_struct_fail",
+            "nested_enum_fail",
+            "struct_enum_fail",
+        ],
+        deps = DEPS,
+    ),
+)
