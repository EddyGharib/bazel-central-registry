diff --git a/BUILD.bazel b/BUILD.bazel
new file mode 100644
index 0000000..778ac9b
--- /dev/null
+++ b/BUILD.bazel
@@ -0,0 +1,25 @@
+# Hey there! Before you start modifying this file, go check out https://github.com/dynacondev/boost.rules.tools for the tool you need!
+
+load("@boost.rules.tools//:tools.bzl", "boost_library")
+
+boost_library(
+    name = "contract",
+    deps = [
+        "@boost//:any",
+        "@boost//:assert",
+        "@boost//:config",
+        "@boost//:core",
+        "@boost//:exception",
+        "@boost//:function",
+        "@boost//:function_types",
+        "@boost//:mpl",
+        "@boost//:optional",
+        "@boost//:preprocessor",
+        "@boost//:smart_ptr",
+        "@boost//:static_assert",
+        "@boost//:thread",
+        "@boost//:type_traits",
+        "@boost//:typeof",
+        "@boost//:utility",
+    ],
+)
diff --git a/MODULE.bazel b/MODULE.bazel
new file mode 100755
index 0000000..4f8d440
--- /dev/null
+++ b/MODULE.bazel
@@ -0,0 +1,14 @@
+"""
+Hey there! Before editing, check out the tool at https://github.com/dynacondev/boost.rules.tools
+Note: These modules follow a circular dependency structure on the boost module https://github.com/dynacondev/boost.rules to keep boost releases from mixing!
+"""
+
+module(
+    name = "boost.contract",
+    version = "1.83.0.bcr.1",
+    compatibility_level = 1,
+)
+
+bazel_dep(name = "boost", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.rules.tools", version = "1.0.0")
+bazel_dep(name = "platforms", version = "0.0.8")
diff --git a/WORKSPACE.bazel b/WORKSPACE.bazel
new file mode 100644
index 0000000..be0754f
--- /dev/null
+++ b/WORKSPACE.bazel
@@ -0,0 +1 @@
+# SEE: MODULE.bazel
diff --git a/test/BUILD.bazel b/test/BUILD.bazel
new file mode 100644
index 0000000..f4331a0
--- /dev/null
+++ b/test/BUILD.bazel
@@ -0,0 +1,246 @@
+load("@boost.rules.tools//:tools.bzl", "boost_test_set")
+
+DEPS = [
+    "@boost//:contract",
+    "@boost//:iostreams",
+]
+
+test_suite(
+    name = "tests",
+    tests = boost_test_set(
+        names = [
+            "call_if/true_void",
+            "call_if/true_",
+            "call_if/no_equal_error",
+            "call_if/no_equal_condition_if",
+            "call_if/no_equal_call_if",
+            "call_if/false_void",
+            "call_if/false_",
+            "call_if/equal_to",
+            "call_if/equal_to_cxx14",
+            "check/ifdef",
+            "check/ifdef_macro",
+            "check/decl_macro",
+            "check/axiom",
+            "check/decl_class",
+            "check/audit_disabled",
+            "check/audit",
+            "constructor/access",
+            "constructor/decl_entry_static_inv_all",
+            "constructor/decl_entry_static_inv_ends",
+            "constructor/decl_entry_static_inv_mid",
+            "constructor/decl_entry_static_inv_none",
+            "constructor/decl_exit_inv_all",
+            "constructor/decl_exit_inv_ends",
+            "constructor/decl_exit_inv_mid",
+            "constructor/decl_exit_inv_none",
+            "constructor/decl_exit_static_inv_all",
+            "constructor/decl_exit_static_inv_ends",
+            "constructor/decl_exit_static_inv_mid",
+            "constructor/decl_exit_static_inv_none",
+            "constructor/decl_post_all",
+            "constructor/decl_post_ends",
+            "constructor/decl_post_mid",
+            "constructor/decl_post_none",
+            "constructor/decl_pre_all",
+            "constructor/decl_pre_ends",
+            "constructor/decl_pre_mid",
+            "constructor/decl_pre_none",
+            "constructor/ifdef_macro",
+            "constructor/ifdef",
+            "constructor/pre_error",
+            "constructor/smoke",
+            "constructor/throwing_body",
+            "constructor/throwing_old",
+            "constructor/throwing_post",
+            "constructor/throwing_pre",
+            "destructor/decl_post_all",
+            "destructor/access",
+            "destructor/decl_entry_inv_all",
+            "destructor/decl_entry_inv_ends",
+            "destructor/decl_entry_inv_mid",
+            "destructor/decl_entry_inv_none",
+            "destructor/decl_entry_static_inv_all",
+            "destructor/decl_entry_static_inv_ends",
+            "destructor/decl_entry_static_inv_mid",
+            "destructor/decl_entry_static_inv_none",
+            "destructor/decl_exit_static_inv_all",
+            "destructor/decl_exit_static_inv_ends",
+            "destructor/decl_exit_static_inv_mid",
+            "destructor/decl_exit_static_inv_none",
+            "destructor/decl_post_ends",
+            "destructor/decl_post_mid",
+            "destructor/decl_post_none",
+            "destructor/ifdef_macro",
+            "destructor/ifdef",
+            "destructor/pre_error",
+            "destructor/smoke",
+            "destructor/throwing_body",
+            "destructor/throwing_old",
+            "destructor/throwing_post",
+            "disable/audit_disabled",
+            "disable/audit",
+            "disable/axiom",
+            "disable/lib_a",
+            "disable/lib_b",
+            "disable/lib_x",
+            "disable/lib_y",
+            "disable/no_post_except_lib",
+            "disable/no_post_except_unit",
+            "disable/nothing_for_pre_prog",
+            "disable/other_assertions_lib",
+            "disable/other_assertions_prog",
+            "disable/other_assertions_unit",
+            "function/throwing_pre",
+            "function/throwing_old",
+            "function/throwing_post",
+            "function/smoke",
+            "function/throwing_body",
+            "function/ifdef",
+            "function/ifdef_macro",
+            "function/decl_post_none",
+            "function/decl_pre_all",
+            "function/decl_pre_none",
+            "function/decl_post_all",
+            "invariant/decl_static_cv",
+            "invariant/decl_const",
+            "invariant/decl_cv_const",
+            "invariant/decl_cv",
+            "invariant/decl_nothing",
+            "invariant/decl_static_const",
+            "invariant/decl_static_cv_const",
+            "invariant/decl_static",
+            "invariant/ifdef_macro",
+            "invariant/ifdef",
+            "invariant/mutable_permissive",
+            "invariant/static_const_permissive",
+            "invariant/static_cv_permissive",
+            "invariant/static_mutable_permissive",
+            "invariant/static_permissive",
+            "invariant/static_volatile_permissive",
+            "invariant/volatile_permissive",
+            "old/no_macro_if_copyable",
+            "old/no_macro",
+            "old/if_copyable",
+            "old/if_copyable_macro",
+            "old/copyable_traits",
+            "old/auto",
+            "public_function/decl_exit_inv_mid",
+            "public_function/access",
+            "public_function/decl_entry_inv_all",
+            "public_function/decl_entry_inv_ends",
+            "public_function/decl_entry_inv_mid",
+            "public_function/decl_entry_inv_none",
+            "public_function/decl_entry_static_inv_all",
+            "public_function/decl_entry_static_inv_ends",
+            "public_function/decl_entry_static_inv_mid",
+            "public_function/decl_entry_static_inv_none",
+            "public_function/decl_exit_inv_all",
+            "public_function/decl_exit_inv_ends",
+            "public_function/decl_exit_inv_none",
+            "public_function/decl_exit_static_inv_all",
+            "public_function/decl_exit_static_inv_ends",
+            "public_function/decl_exit_static_inv_mid",
+            "public_function/decl_exit_static_inv_none",
+            "public_function/decl_post_all",
+            "public_function/decl_post_ends",
+            "public_function/decl_post_mid",
+            "public_function/decl_post_none",
+            "public_function/decl_pre_all",
+            "public_function/decl_pre_ends",
+            "public_function/decl_pre_mid",
+            "public_function/decl_pre_none",
+            "public_function/friend",
+            "public_function/ifdef_macro",
+            "public_function/ifdef",
+            "public_function/max_args_no_tva",
+            "public_function/max_args",
+            "public_function/max_args0_no_tva",
+            "public_function/max_args0",
+            "public_function/max_args1_no_tva",
+            "public_function/max_args1",
+            "public_function/max_args2_no_tva",
+            "public_function/max_args2",
+            "public_function/max_bases",
+            "public_function/old_virtual",
+            "public_function/overload_no_tva",
+            "public_function/overload",
+            "public_function/override_error",
+            "public_function/override_permissive",
+            "public_function/protected_error",
+            "public_function/protected",
+            "public_function/smoke",
+            "public_function/static_ifdef_macro",
+            "public_function/static_ifdef",
+            "public_function/static_throwing_body",
+            "public_function/static_throwing_old",
+            "public_function/static_throwing_post",
+            "public_function/static_throwing_pre",
+            "public_function/static",
+            "public_function/throwing_body_virtual_branch",
+            "public_function/throwing_body_virtual",
+            "public_function/throwing_body",
+            "public_function/throwing_old",
+            "public_function/throwing_post",
+            "public_function/throwing_pre",
+            "public_function/virtual_access_multi",
+            "public_function/virtual_access",
+            "public_function/virtual_branch",
+            "public_function/virtual_sparse",
+            "public_function/virtual",
+            "result/mixed_optional",
+            "result/mixed_optional_ref",
+            "specify/old",
+            "specify/except",
+            "specify/missing_check",
+            "specify/nothing",
+            "specify/old_except",
+            "specify/old_post_except",
+            "specify/old_post",
+            "specify/post_except",
+            "specify/post",
+            "specify/pre_except",
+            "specify/pre_old_except",
+            "specify/pre_old_post_except",
+            "specify/pre_old_post",
+            "specify/pre_old",
+            "specify/pre_post_except",
+            "specify/pre_post",
+            "specify/pre",
+        ],
+        deps = DEPS,
+    ) + boost_test_set(
+        expect_fail = True,
+        names = [
+            "check/axiom_error",
+            "check/audit_error",
+            "check/audit_disabled_error",
+            "disable/audit_disabled_error",
+            "disable/audit_error",
+            "disable/axiom_error",
+            "invariant/mutable_error",
+            "invariant/static_const_error",
+            "invariant/static_cv_error",
+            "invariant/static_error",
+            "invariant/static_mutable_error",
+            "invariant/static_volatile_error",
+            "invariant/volatile_error",
+            "old/no_make_old_if_copyable_error",
+            "old/no_make_old_error",
+            "old/if_copyable_error",
+            "result/type_mismatch_error",
+            "specify/auto_error",
+            "specify/auto_pre_error",
+            "specify/auto_pre_old_error",
+            "specify/auto_pre_old_post_error",
+            "specify/auto_pre_old_post_except_error",
+            "specify/except_old_error",
+            "specify/except_post_error",
+            "specify/except_pre_error",
+            "specify/old_pre_error",
+            "specify/post_old_error",
+            "specify/post_pre_error",
+        ],
+        deps = DEPS,
+    ),
+)
