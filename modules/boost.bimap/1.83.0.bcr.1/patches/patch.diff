diff --git a/BUILD.bazel b/BUILD.bazel
new file mode 100644
index 0000000..f3c3d59
--- /dev/null
+++ b/BUILD.bazel
@@ -0,0 +1,22 @@
+# Hey there! Before you start modifying this file, go check out https://github.com/dynacondev/boost.rules.tools for the tool you need!
+
+load("@boost.rules.tools//:tools.bzl", "boost_library")
+
+boost_library(
+    name = "bimap",
+    deps = [
+        "@boost//:concept_check",
+        "@boost//:config",
+        "@boost//:container_hash",
+        "@boost//:core",
+        "@boost//:iterator",
+        "@boost//:lambda",
+        "@boost//:mpl",
+        "@boost//:multi_index",
+        "@boost//:preprocessor",
+        "@boost//:static_assert",
+        "@boost//:throw_exception",
+        "@boost//:type_traits",
+        "@boost//:utility",
+    ],
+)
diff --git a/MODULE.bazel b/MODULE.bazel
new file mode 100755
index 0000000..4aba086
--- /dev/null
+++ b/MODULE.bazel
@@ -0,0 +1,14 @@
+"""
+Hey there! Before editing, check out the tool at https://github.com/dynacondev/boost.rules.tools
+Note: These modules follow a circular dependency structure on the boost module https://github.com/dynacondev/boost.rules to keep boost releases from mixing!
+"""
+
+module(
+    name = "boost.bimap",
+    version = "1.83.0.bcr.1",
+    compatibility_level = 1,
+)
+
+bazel_dep(name = "boost", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.rules.tools", version = "1.0.0")
+bazel_dep(name = "platforms", version = "0.0.8")
diff --git a/WORKSPACE.bazel b/WORKSPACE.bazel
new file mode 100644
index 0000000..be0754f
--- /dev/null
+++ b/WORKSPACE.bazel
@@ -0,0 +1 @@
+# SEE: MODULE.bazel
diff --git a/bazel_test/BUILD.bazel b/bazel_test/BUILD.bazel
new file mode 100644
index 0000000..4804d36
--- /dev/null
+++ b/bazel_test/BUILD.bazel
@@ -0,0 +1,16 @@
+load("@boost.rules.tools//:tools.bzl", "boost_test_set")
+
+DEPS = [
+    "@boost//:bimap",
+]
+
+test_suite(
+    name = "tests",
+    tests = boost_test_set(
+        file_extensions = ".cc",
+        names = [
+            "bimap_test",
+        ],
+        deps = DEPS,
+    ),
+)
diff --git a/bazel_test/bimap_test.cc b/bazel_test/bimap_test.cc
new file mode 100644
index 0000000..034aad5
--- /dev/null
+++ b/bazel_test/bimap_test.cc
@@ -0,0 +1,21 @@
+#include <boost/bimap.hpp>
+
+#include <cassert>
+#include <string>
+
+int main()
+{
+    using boost::bimap;
+
+    bimap<std::string, int> map;
+
+    map.insert({"4", 4});
+
+    auto iter = map.right.find(4);
+
+    if (iter == map.right.end()) {
+        return -1;
+    }
+
+    return iter->second == "4" ? 0 : -1;
+}
diff --git a/test/BUILD.bazel b/test/BUILD.bazel
new file mode 100644
index 0000000..8ed1d75
--- /dev/null
+++ b/test/BUILD.bazel
@@ -0,0 +1,56 @@
+load("@boost.rules.tools//:tools.bzl", "boost_test_set")
+
+DEPS = [
+    "@boost//:bimap",
+    "@boost//:serialization",
+    "@boost//:assign",
+    ":hdrs",
+]
+
+test_suite(
+    name = "tests",
+    tests = boost_test_set(
+        names = [
+            # "compile_fail/test_bimap_info_1",
+            # "compile_fail/test_bimap_info_2",
+            # "compile_fail/test_bimap_info_3",
+            # "compile_fail/test_bimap_mutable_1",
+            # "compile_fail/test_bimap_mutable_2",
+            # "compile_fail/test_bimap_mutable_3",
+            "test_bimap_assign",
+            "test_bimap_convenience_header",
+            "test_bimap_extra",
+            "test_bimap_info",
+            "test_bimap_lambda",
+            "test_bimap_list_of",
+            "test_bimap_modify",
+            "test_bimap_multiset_of",
+            "test_bimap_mutable",
+            "test_bimap_operator_bracket",
+            "test_bimap_ordered",
+            "test_bimap_project",
+            "test_bimap_property_map",
+            "test_bimap_range",
+            "test_bimap_sequenced",
+            "test_bimap_serialization",
+            "test_bimap_set_of",
+            "test_bimap_unconstrained",
+            "test_bimap_unordered",
+            "test_bimap_unordered_multiset_of",
+            "test_bimap_unordered_set_of",
+            "test_bimap_vector_of",
+            "test_mutant",
+            "test_mutant_relation",
+            "test_structured_pair",
+            "test_tagged",
+        ],
+        deps = DEPS,
+    ),
+)
+
+cc_library(
+    name = "hdrs",
+    hdrs = glob(["**/*.hpp"]),
+    include_prefix = "libs/bimap/test/",
+    visibility = ["//visibility:private"],
+)
