diff --git a/BUILD.bazel b/BUILD.bazel
new file mode 100644
index 0000000..f32a5c8
--- /dev/null
+++ b/BUILD.bazel
@@ -0,0 +1,13 @@
+# Hey there! Before you start modifying this file, go check out https://github.com/dynacondev/boost.rules.tools for the tool you need!
+
+load("@boost.rules.tools//:tools.bzl", "boost_library")
+
+boost_library(
+    name = "core",
+    deps = [
+        "@boost//:assert",
+        "@boost//:config",
+        "@boost//:static_assert",
+        "@boost//:throw_exception",
+    ],
+)
diff --git a/MODULE.bazel b/MODULE.bazel
new file mode 100755
index 0000000..4a7345a
--- /dev/null
+++ b/MODULE.bazel
@@ -0,0 +1,17 @@
+"""
+Hey there! Before editing, check out the tool at https://github.com/dynacondev/boost.rules.tools
+Note: These modules follow a circular dependency structure on the boost module https://github.com/dynacondev/boost.rules to keep boost releases from mixing!
+"""
+
+module(
+    name = "boost.core",
+    version = "1.83.0.bcr.1",
+    compatibility_level = 1,
+)
+
+bazel_dep(name = "boost", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.rules.tools", version = "1.0.0")
+bazel_dep(name = "platforms", version = "0.0.8")
+
+# Needed for tests - :archive target
+bazel_dep(name = "boost.serialization", version = "1.83.0.bcr.1")
diff --git a/WORKSPACE.bazel b/WORKSPACE.bazel
new file mode 100644
index 0000000..be0754f
--- /dev/null
+++ b/WORKSPACE.bazel
@@ -0,0 +1 @@
+# SEE: MODULE.bazel
diff --git a/test/BUILD.bazel b/test/BUILD.bazel
new file mode 100644
index 0000000..e6ebc83
--- /dev/null
+++ b/test/BUILD.bazel
@@ -0,0 +1,273 @@
+load("@boost.rules.tools//:tools.bzl", "boost_test_set")
+
+DEPS = [
+    "@boost//:core",
+    "@boost//:move",
+    "@boost//:type_traits",
+    "@boost//:utility",
+    "@boost.serialization//:archive",
+]
+
+test_suite(
+    name = "tests",
+    tests = boost_test_set(
+        names = [
+            "swap/swap_array_of_template",
+            "swap/swap_array_of_array_of_class",
+            "swap/swap_array_of_array_of_int",
+            "swap/swap_array_of_class",
+            "swap/swap_array_of_int",
+            "swap/swap_lib_header_1",
+            "swap/swap_lib_header_2",
+            "swap/swap_mixed_headers_1",
+            "swap/swap_mixed_headers_2",
+            "swap/swap_no_ambiguity_in_boost",
+            "swap/swap_noexcept",
+            "swap/swap_primitive",
+            "swap/swap_root_header_1",
+            "swap/swap_root_header_2",
+            "swap/swap_specialized_in_boost_and_other",
+            "swap/swap_specialized_in_boost",
+            "swap/swap_specialized_in_global",
+            "swap/swap_specialized_in_other",
+            "swap/swap_specialized_in_std",
+            "swap/swap_std_bitset",
+            "swap/swap_std_dateorder",
+            "swap/swap_std_string",
+            "swap/swap_std_typeinfo_ptr",
+            "swap/swap_std_vector_of_boost",
+            "swap/swap_std_vector_of_global",
+            "swap/swap_std_vector_of_other",
+            "addressof_constexpr_test",
+            "addressof_fn_test",
+            "addressof_np_test",
+            "addressof_test",
+            "addressof_test2",
+            "alignof_test",
+            "alloc_construct_cxx11_test",
+            "alloc_construct_test",
+            "alloc_construct_throws_test",
+            "allocator_allocate_hint_test",
+            "allocator_allocate_test",
+            "allocator_const_pointer_test",
+            "allocator_const_void_pointer_test",
+            "allocator_construct_n_test",
+            "allocator_construct_test",
+            "allocator_deallocate_test",
+            "allocator_destroy_n_test",
+            "allocator_destroy_test",
+            "allocator_difference_type_test",
+            "allocator_is_always_equal_test",
+            "allocator_max_size_test",
+            "allocator_pocca_test",
+            "allocator_pocma_test",
+            "allocator_pocs_test",
+            "allocator_pointer_test",
+            "allocator_rebind_test",
+            "allocator_size_type_test",
+            "allocator_soccc_test",
+            "allocator_traits_test",
+            "allocator_value_type_test",
+            "allocator_void_pointer_test",
+            "as_bytes_test",
+            "as_writable_bytes_test",
+            "bit_byteswap_test_cx",
+            "bit_byteswap_test",
+            "bit_cast_test_cx",
+            "bit_cast_test",
+            "bit_ceil_test_cx",
+            "bit_ceil_test",
+            "bit_countl_test_cx",
+            "bit_countl_test",
+            "bit_countr_test_cx",
+            "bit_countr_test",
+            "bit_endian_test",
+            "bit_floor_test_cx",
+            "bit_floor_test",
+            "bit_popcount_test_cx",
+            "bit_popcount_test",
+            "bit_rotate_test_cx",
+            "bit_rotate_test",
+            "bit_width_test_cx",
+            "bit_width_test",
+            "checked_delete_test",
+            "cmath_test",
+            "data_test",
+            "default_allocator_allocate_hint_test",
+            "default_allocator_test",
+            "demangle_test",
+            "demangled_name_test",
+            "detail_iterator_test",
+            "eif_constructors",
+            "eif_dummy_arg_disambiguation",
+            "eif_lazy_test",
+            "eif_lazy",
+            "eif_member_templates",
+            "eif_namespace_disambiguation",
+            "eif_no_disambiguation",
+            "eif_partial_specializations",
+            "empty_value_constexpr_test",
+            "empty_value_final_test",
+            "empty_value_size_test",
+            "empty_value_test",
+            "exchange_move_test",
+            "exchange_test",
+            "explicit_operator_bool_noexcept",
+            "explicit_operator_bool",
+            "fclose_deleter_test",
+            "first_scalar_constexpr_test",
+            "first_scalar_test",
+            "get_pointer_test",
+            "has_single_bit_test_cx",
+            "has_single_bit_test",
+            "identity_rvalue_test",
+            "identity_test",
+            "ignore_unused_test",
+            "is_same_test",
+            "iterator_test",
+            "launder_test",
+            "lib_typeid",
+            "lightweight_test_all_eq_test",
+            "lightweight_test_all_with_test",
+            "lightweight_test_bool",
+            "lightweight_test_eq_nullptr",
+            "lightweight_test_gt_ge_test",
+            "lightweight_test_lt_le_test",
+            "lightweight_test_test",
+            "lightweight_test_test2",
+            "lightweight_test_test3",
+            "lightweight_test_test4",
+            "lightweight_test_test5",
+            "lightweight_test_test6",
+            "lightweight_test_with_test",
+            "make_span_test",
+            "max_align_test",
+            "memory_resource_test",
+            "no_exceptions_support_test",
+            "noinit_adaptor_test",
+            "nvp_test",
+            "pointer_traits_difference_type_test",
+            "pointer_traits_element_type_test",
+            "pointer_traits_pointer_test",
+            "pointer_traits_pointer_to_sfinae_test",
+            "pointer_traits_pointer_to_test",
+            "pointer_traits_rebind_sfinae_test",
+            "pointer_traits_rebind_test",
+            "pointer_traits_sfinae_test",
+            "quick_exit_test",
+            "quick",
+            "ref_conversion_test",
+            "ref_ct_test",
+            "ref_cv_test",
+            "ref_fn_test",
+            "ref_ref_test",
+            "ref_test",
+            "scoped_enum",
+            "serialization_construct_data_test",
+            "serialization_nvp_test",
+            "serialization_split_free_test",
+            "serialization_split_member_test",
+            "size_test",
+            "snprintf_test",
+            "sp_thread_pause_test",
+            "sp_thread_sleep_test",
+            "sp_thread_yield_test",
+            "sp_typeinfo_test",
+            "span_boost_begin_test",
+            "span_constructible_test",
+            "span_deduction_guide_test",
+            "span_test",
+            "span_types_test",
+            "splitmix64_test",
+            "sv_common_reference_test",
+            "sv_common_reference_test2",
+            "sv_compare_test",
+            "sv_construct_test",
+            "sv_contains_test",
+            "sv_conversion_test",
+            "sv_conversion_test2",
+            "sv_copy_test",
+            "sv_element_access_test",
+            "sv_ends_with_test",
+            "sv_eq_test",
+            "sv_find_first_not_of_test",
+            "sv_find_first_of_test",
+            "sv_find_last_not_of_test",
+            "sv_find_last_of_test",
+            "sv_find_test",
+            "sv_iteration_test",
+            "sv_lt_test",
+            "sv_modifiers_test",
+            "sv_rfind_test",
+            "sv_starts_with_test",
+            "sv_stream_insert_test",
+            "sv_substr_test",
+            "sv_types_test",
+            "sv_windows_h_test",
+            "test_lib_typeid",
+            "test_lib_typeid2",
+            "to_address_test",
+            "type_name_test",
+            "typeinfo_test",
+            "uncaught_exceptions_np",
+            "uncaught_exceptions",
+            "underlying_type",
+            "use_default_test",
+            "visit_each_test",
+            "yield_prim_pthread_cancel_test",
+            "yield_prim_windows_h_test",
+        ],
+        deps = DEPS,
+    ) + boost_test_set(
+        expect_fail = True,
+        names = [
+            "swap/swap_const_wrapper_fail",
+            "addressof_fail_rvalue",
+            "bit_width_fail",
+            "checked_delete_fail",
+            "checked_delete_fail2",
+            "explicit_operator_bool_compile_fail_conv_int",
+            "explicit_operator_bool_compile_fail_conv_pvoid",
+            "explicit_operator_bool_compile_fail_delete",
+            "explicit_operator_bool_compile_fail_shift",
+            "lightweight_test_all_with_fail",
+            "lightweight_test_fail",
+            "lightweight_test_fail2",
+            "lightweight_test_fail3",
+            "lightweight_test_fail4",
+            "lightweight_test_fail5",
+            "lightweight_test_fail6",
+            "lightweight_test_fail7",
+            "lightweight_test_fail8",
+            "lightweight_test_fail9",
+            "lightweight_test_fail10",
+            "lightweight_test_fail11",
+            "lightweight_test_fail12",
+            "lightweight_test_fail13",
+            "lightweight_test_fail14",
+            "lightweight_test_fail15",
+            "lightweight_test_fail16",
+            "lightweight_test_ge_fail",
+            "lightweight_test_gt_fail",
+            "lightweight_test_le_fail",
+            "lightweight_test_lt_fail",
+            "lightweight_test_with_fail",
+            "noncopyable_compile_fail",
+            "quick_exit_fail",
+            "ref_implicit_fail",
+            "ref_implicit_fail2",
+            "ref_implicit_fail3",
+            "ref_implicit_fail4",
+            "ref_rv_fail1",
+            "ref_rv_fail2",
+            "ref_rv_fail3",
+            "ref_rv_fail4",
+            "ref_rv_fail5",
+            "scoped_enum_compile_fail_conv_from_int",
+            "scoped_enum_compile_fail_conv_to_int",
+            "sv_nullptr_fail",
+            "verbose_terminate_handler_fail",
+        ],
+        deps = DEPS,
+    ),
+)
