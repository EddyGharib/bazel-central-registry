diff --git a/BUILD.bazel b/BUILD.bazel
new file mode 100644
index 0000000..36bfcf0
--- /dev/null
+++ b/BUILD.bazel
@@ -0,0 +1,24 @@
+# Hey there! Before you start modifying this file, go check out https://github.com/dynacondev/boost.rules.tools for the tool you need!
+
+load("@boost.rules.tools//:tools.bzl", "boost_library")
+
+boost_library(
+    name = "chrono",
+    deps = [
+        "@boost//:assert",
+        "@boost//:config",
+        "@boost//:core",
+        "@boost//:integer",
+        "@boost//:move",
+        "@boost//:mpl",
+        "@boost//:predef",
+        "@boost//:ratio",
+        "@boost//:static_assert",
+        "@boost//:system",
+        "@boost//:throw_exception",
+        "@boost//:type_traits",
+        "@boost//:typeof",
+        "@boost//:utility",
+        "@boost//:winapi",
+    ],
+)
diff --git a/MODULE.bazel b/MODULE.bazel
new file mode 100755
index 0000000..b55ae8e
--- /dev/null
+++ b/MODULE.bazel
@@ -0,0 +1,14 @@
+"""
+Hey there! Before editing, check out the tool at https://github.com/dynacondev/boost.rules.tools
+Note: These modules follow a circular dependency structure on the boost module https://github.com/dynacondev/boost.rules to keep boost releases from mixing!
+"""
+
+module(
+    name = "boost.chrono",
+    version = "1.83.0.bcr.1",
+    compatibility_level = 1,
+)
+
+bazel_dep(name = "boost", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.rules.tools", version = "1.0.0")
+bazel_dep(name = "platforms", version = "0.0.8")
diff --git a/WORKSPACE.bazel b/WORKSPACE.bazel
new file mode 100644
index 0000000..be0754f
--- /dev/null
+++ b/WORKSPACE.bazel
@@ -0,0 +1 @@
+# SEE: MODULE.bazel
diff --git a/test/BUILD.bazel b/test/BUILD.bazel
new file mode 100644
index 0000000..5de01f2
--- /dev/null
+++ b/test/BUILD.bazel
@@ -0,0 +1,78 @@
+load("@boost.rules.tools//:tools.bzl", "boost_test_set")
+
+DEPS = [
+    "@boost//:chrono",
+]
+
+test_suite(
+    name = "tests",
+    tests = boost_test_set(
+        names = [
+            "one_obj",
+            "another_obj",
+            "intmax_c",
+            "win32_test",
+            "run_timer_test",
+            "test_7868",
+            "test_9337",
+            "test_10631",
+            "test_10778",
+            "test_11006",
+            "test_11012",
+            "test_12176",
+            "traits/treat_as_floating_point_pass",
+            "traits/duration_values_pass",
+            "traits/common_type_time_point_pass",
+            "traits/common_type_duration_pass",
+            "time_point/time_point_cast_pass",
+            "time_point/arithmetic_ext_pass",
+            "time_point/arithmetic_pass",
+            "time_point/comparisons_pass",
+            "time_point/constructor_pass",
+            "time_point/default_duration_pass",
+            "time_point/default_duration.pass",
+            "time_point/min_max_pass",
+            "io/duration_input",
+            "io/duration_output",
+            "io/time_point_input",
+            "io/time_point_output",
+            "duration/arithmetic_pass",
+            "duration/comparisons_pass",
+            "duration/constructor_pass",
+            "duration/default_ratio_pass",
+            "duration/duration_cast_pass",
+            "duration/duration_values_pass",
+            "duration/ratio_alias_pass",
+            "duration/rounding_pass",
+            "duration/typedefs_pass",
+            "duration/types_pass",
+            "clock/clock_pass",
+        ],
+        deps = DEPS,
+    ) + boost_test_set(
+        expect_fail = True,
+        names = [
+            "time_point/duration.fail",
+            "time_point/not_duration_fail",
+            "time_point/time_point_cast_int_fail",
+            "time_point/cons/implicit_fail",
+            "time_point/cons/non_implicit_convertible_duration_fail",
+            "time_point/comparisons/equal_fail",
+            "time_point/comparisons/less_fail",
+            "duration/duration_cast_int_fail",
+            "duration/duration_duration_fail",
+            "duration/positive_num_fail",
+            "duration/ratio_fail",
+            "duration/nonmember/divide_rep2_fail",
+            "duration/nonmember/modulus_rep2_fail",
+            "duration/nonmember/times_rep2_lhs_fail",
+            "duration/nonmember/times_rep2_rhs_fail",
+            "duration/cons/convert_float_to_int_fail",
+            "duration/cons/convert_inexact_fail",
+            "duration/cons/implicit_constructot_fail",
+            "duration/cons/non_implicit_convertible_rep_fail",
+            "duration/cons/treat_as_floating_point_Rep2_true_fail",
+        ],
+        deps = DEPS,
+    ),
+)
