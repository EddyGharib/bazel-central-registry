diff --git a/BUILD.bazel b/BUILD.bazel
new file mode 100644
index 0000000..112b23c
--- /dev/null
+++ b/BUILD.bazel
@@ -0,0 +1,55 @@
+load("@bazel_skylib//lib:selects.bzl", "selects")
+load("@boost.rules.tools//:tools.bzl", "boost_library")
+
+boost_library(
+    name = "fiber",
+    srcs = select({
+        # BOOST_FIBER_NUMA_SRCS
+        "@boost.rules.tools//:linux_arm": [
+        ],
+        "@boost.rules.tools//:linux_ppc": [
+            "src/numa/linux/pin_thread.cpp",
+            "src/numa/linux/topology.cpp",
+        ],  # MAYBE SHOULD BE BLANK
+        "@boost.rules.tools//:linux_x86_64": [
+            "src/numa/linux/pin_thread.cpp",
+            "src/numa/linux/topology.cpp",
+        ],
+        "@boost.rules.tools//:windows_x86_64": [
+            "src/numa/windows/pin_thread.cpp",
+            "src/numa/windows/topology.cpp",
+        ],
+        "//conditions:default": [],
+    }) + glob([
+        "src/algo/**/*.cpp",
+    ]) + [
+        "examples/asio/detail/yield.hpp",
+    ],
+    hdrs = [
+        # "examples/asio/round_robin.hpp", # TODO Why are these here??
+        # "examples/asio/yield.hpp",
+    ],
+    copts = select({
+        "@boost.rules.tools//:windows_x86_64": [
+            "/D_WIN32_WINNT=0x0601",
+        ],
+        "//conditions:default": [],
+    }),
+    exclude_src = ["src/numa/**/*.cpp"],
+    linkopts = selects.with_or({
+        ("@platforms//os:linux", "@platforms//os:osx", "@platforms//os:ios", "@platforms//os:watchos", "@platforms//os:tvos"): ["-lpthread"],
+        "//conditions:default": [],
+    }),
+    deps = [
+        "@boost.algorithm//:algorithm",
+        "@boost.assert//:assert",
+        "@boost.config//:config",
+        "@boost.context//:context",
+        "@boost.core//:core",
+        "@boost.filesystem//:filesystem",
+        "@boost.format//:format",
+        "@boost.intrusive//:intrusive",
+        "@boost.predef//:predef",
+        "@boost.smart_ptr//:smart_ptr",
+    ],
+)
diff --git a/MODULE.bazel b/MODULE.bazel
new file mode 100755
index 0000000..7bf4a87
--- /dev/null
+++ b/MODULE.bazel
@@ -0,0 +1,19 @@
+module(
+    name = "boost.fiber",
+    version = "1.83.0.bcr.1",
+    compatibility_level = 1,
+)
+
+bazel_dep(name = "boost.rules.tools", version = "1.0.0")
+bazel_dep(name = "platforms", version = "0.0.8")
+bazel_dep(name = "bazel_skylib", version = "1.5.0")
+bazel_dep(name = "boost.algorithm", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.assert", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.config", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.context", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.core", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.filesystem", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.format", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.intrusive", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.predef", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.smart_ptr", version = "1.83.0.bcr.1")
diff --git a/WORKSPACE.bazel b/WORKSPACE.bazel
new file mode 100644
index 0000000..be0754f
--- /dev/null
+++ b/WORKSPACE.bazel
@@ -0,0 +1 @@
+# SEE: MODULE.bazel
diff --git a/bazel_test/BUILD.bazel b/bazel_test/BUILD.bazel
new file mode 100644
index 0000000..91f63a7
--- /dev/null
+++ b/bazel_test/BUILD.bazel
@@ -0,0 +1,16 @@
+load("@boost.rules.tools//:tools.bzl", "boost_test_set")
+
+DEPS = [
+    "@boost.fiber//:fiber",
+]
+
+test_suite(
+    name = "tests",
+    tests = boost_test_set(
+        file_extensions = ".cc",
+        names = [
+            "fiber_test",
+        ],
+        deps = DEPS,
+    ),
+)
diff --git a/bazel_test/fiber_test.cc b/bazel_test/fiber_test.cc
new file mode 100644
index 0000000..98d274e
--- /dev/null
+++ b/bazel_test/fiber_test.cc
@@ -0,0 +1,36 @@
+// Example originates from the boost.fiber repo: 
+// https://github.com/boostorg/fiber/blob/develop/examples/simple.cpp
+
+#include <cstdlib>
+#include <iostream>
+#include <memory>
+#include <string>
+#include <thread>
+
+#include <boost/intrusive_ptr.hpp>
+
+#include <boost/fiber/all.hpp>
+
+inline
+void fn( std::string const& str, int n) {
+	for ( int i = 0; i < n; ++i) {
+		std::cout << i << ": " << str << std::endl;
+		boost::this_fiber::yield();
+	}
+}
+
+int main() {
+    try {
+        boost::fibers::fiber f1( fn, "abc", 5);
+        std::cerr << "f1 : " << f1.get_id() << std::endl;
+        f1.join();
+        std::cout << "done." << std::endl;
+
+        return EXIT_SUCCESS;
+    } catch ( std::exception const& e) {
+        std::cerr << "exception: " << e.what() << std::endl;
+    } catch (...) {
+        std::cerr << "unhandled exception" << std::endl;
+    }
+	return EXIT_FAILURE;
+}
\ No newline at end of file
