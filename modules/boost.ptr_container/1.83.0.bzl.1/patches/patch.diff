diff --git a/BUILD.bazel b/BUILD.bazel
new file mode 100644
index 0000000..38de588
--- /dev/null
+++ b/BUILD.bazel
@@ -0,0 +1,20 @@
+load("@boost.rules.tools//:tools.bzl", "boost_library")
+
+boost_library(
+    name = "ptr_container",
+    deps = [
+        "@boost.array//:array",
+        "@boost.assert//:assert",
+        "@boost.circular_buffer//:circular_buffer",
+        "@boost.config//:config",
+        "@boost.core//:core",
+        "@boost.iterator//:iterator",
+        "@boost.mpl//:mpl",
+        "@boost.range//:range",
+        "@boost.smart_ptr//:smart_ptr",
+        "@boost.static_assert//:static_assert",
+        "@boost.type_traits//:type_traits",
+        "@boost.unordered//:unordered",
+        "@boost.utility//:utility",
+    ],
+)
diff --git a/MODULE.bazel b/MODULE.bazel
new file mode 100755
index 0000000..6f2a1fc
--- /dev/null
+++ b/MODULE.bazel
@@ -0,0 +1,21 @@
+module(
+    name = "boost.ptr_container",
+    version = "1.83.0.bzl.1",
+    compatibility_level = 1,
+)
+
+bazel_dep(name = "boost.rules.tools", version = "1.0.0")
+bazel_dep(name = "platforms", version = "0.0.8")
+bazel_dep(name = "boost.array", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.assert", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.circular_buffer", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.config", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.core", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.iterator", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.mpl", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.range", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.smart_ptr", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.static_assert", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.type_traits", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.unordered", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.utility", version = "1.83.0.bzl.1")
diff --git a/WORKSPACE.bazel b/WORKSPACE.bazel
new file mode 100644
index 0000000..be0754f
--- /dev/null
+++ b/WORKSPACE.bazel
@@ -0,0 +1 @@
+# SEE: MODULE.bazel
diff --git a/bazel_test/BUILD.bazel b/bazel_test/BUILD.bazel
new file mode 100644
index 0000000..26fc1b7
--- /dev/null
+++ b/bazel_test/BUILD.bazel
@@ -0,0 +1,16 @@
+load("@boost.rules.tools//:tools.bzl", "boost_test_set")
+
+DEPS = [
+    "@boost.ptr_container//:ptr_container",
+]
+
+test_suite(
+    name = "tests",
+    tests = boost_test_set(
+        file_extensions = ".cc",
+        names = [
+            "ptr_container_test",
+        ],
+        deps = DEPS,
+    ),
+)
diff --git a/bazel_test/ptr_container_test.cc b/bazel_test/ptr_container_test.cc
new file mode 100644
index 0000000..4c8d25e
--- /dev/null
+++ b/bazel_test/ptr_container_test.cc
@@ -0,0 +1,36 @@
+#include <string>
+
+#include <boost/ptr_container/clone_allocator.hpp>
+#include <boost/ptr_container/exception.hpp>
+#include <boost/ptr_container/indirect_fun.hpp>
+#include <boost/ptr_container/nullable.hpp>
+#include <boost/ptr_container/ptr_array.hpp>
+#include <boost/ptr_container/ptr_circular_buffer.hpp>
+#include <boost/ptr_container/ptr_container.hpp>
+#include <boost/ptr_container/ptr_deque.hpp>
+#include <boost/ptr_container/ptr_inserter.hpp>
+#include <boost/ptr_container/ptr_list.hpp>
+#include <boost/ptr_container/ptr_map.hpp>
+#include <boost/ptr_container/ptr_map_adapter.hpp>
+#include <boost/ptr_container/ptr_sequence_adapter.hpp>
+#include <boost/ptr_container/ptr_set.hpp>
+#include <boost/ptr_container/ptr_set_adapter.hpp>
+#include <boost/ptr_container/ptr_unordered_map.hpp>
+#include <boost/ptr_container/ptr_unordered_set.hpp>
+#include <boost/ptr_container/ptr_vector.hpp>
+#include <boost/ptr_container/serialize_ptr_array.hpp>
+#include <boost/ptr_container/serialize_ptr_circular_buffer.hpp>
+#include <boost/ptr_container/serialize_ptr_container.hpp>
+#include <boost/ptr_container/serialize_ptr_deque.hpp>
+#include <boost/ptr_container/serialize_ptr_list.hpp>
+#include <boost/ptr_container/serialize_ptr_map.hpp>
+#include <boost/ptr_container/serialize_ptr_set.hpp>
+#include <boost/ptr_container/serialize_ptr_unordered_map.hpp>
+#include <boost/ptr_container/serialize_ptr_unordered_set.hpp>
+#include <boost/ptr_container/serialize_ptr_vector.hpp>
+
+int main()
+{
+    boost::ptr_map<std::string, int> map;
+    return map.empty() ? 0 : 1;
+}   
