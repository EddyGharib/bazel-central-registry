diff --git a/BUILD.bazel b/BUILD.bazel
new file mode 100644
index 0000000..45940bb
--- /dev/null
+++ b/BUILD.bazel
@@ -0,0 +1,87 @@
+load("@bazel_skylib//lib:selects.bzl", "selects")
+load("@bazel_skylib//rules:common_settings.bzl", "bool_flag")
+load("@boost.rules.tools//:tools.bzl", "boost_library")
+
+bool_flag(
+    name = "asio_disable_epoll",
+    build_setting_default = False,
+)
+
+config_setting(
+    name = "asio_no_epoll",
+    flag_values = {
+        ":asio_disable_epoll": "True",
+    },
+)
+
+bool_flag(
+    name = "asio_has_io_uring",
+    build_setting_default = False,
+)
+
+config_setting(
+    name = "asio_io_uring",
+    flag_values = {
+        ":asio_has_io_uring": "True",
+    },
+)
+
+boost_library(
+    name = "asio",
+    srcs = [
+        "//:build_asio.cpp",
+    ],
+    defines = [
+        "BOOST_ASIO_SEPARATE_COMPILATION",
+    ] + selects.with_or({
+        ("@platforms//os:osx", "@platforms//os:ios", "@platforms//os:watchos", "@platforms//os:tvos"): [
+            "BOOST_ASIO_DISABLE_STD_EXPERIMENTAL_STRING_VIEW",
+        ],
+        "//conditions:default": [],
+    }) + select({
+        ":asio_no_epoll": ["BOOST_ASIO_DISABLE_EPOLL"],
+        "//conditions:default": [],
+    }) + select({
+        ":asio_io_uring": ["BOOST_ASIO_HAS_IO_URING"],
+        "//conditions:default": [],
+    }),
+    linkopts = select({
+        "@platforms//os:android": [],
+        "//conditions:default": ["-lpthread"],
+    }) + select({
+        ":asio_io_uring": ["-luring"],
+        "//conditions:default": [],
+    }),
+    deps = [
+        "@boost.align//:align",
+        "@boost.array//:array",
+        "@boost.assert//:assert",
+        "@boost.bind//:bind",
+        "@boost.chrono//:chrono",
+        "@boost.config//:config",
+        "@boost.context//:context",
+        "@boost.core//:core",
+        "@boost.coroutine//:coroutine",
+        "@boost.date_time//:date_time",
+        "@boost.exception//:exception",
+        "@boost.function//:function",
+        "@boost.regex//:regex",
+        "@boost.smart_ptr//:smart_ptr",
+        "@boost.system//:system",
+        "@boost.throw_exception//:throw_exception",
+        "@boost.type_traits//:type_traits",
+        "@boost.utility//:utility",
+    ],
+)
+
+# cc_library(
+#     name = "asio_ssl",
+#     srcs = [
+#         "//:build_asio_ssl.cpp",
+#     ],
+#     visibility = ["//visibility:public"],
+#     deps = [
+#         ":asio",
+#         "@boringssl//:ssl",
+#     ],
+# )
diff --git a/MODULE.bazel b/MODULE.bazel
new file mode 100755
index 0000000..e0f84cc
--- /dev/null
+++ b/MODULE.bazel
@@ -0,0 +1,28 @@
+module(
+    name = "boost.asio",
+    version = "1.83.0.bcr.1",
+    compatibility_level = 1,
+)
+
+bazel_dep(name = "boost.rules.tools", version = "1.0.0")
+bazel_dep(name = "platforms", version = "0.0.8")
+bazel_dep(name = "bazel_skylib", version = "1.5.0")
+bazel_dep(name = "boringssl", version = "0.0.0-20230215-5c22014")
+bazel_dep(name = "boost.align", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.array", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.assert", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.bind", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.chrono", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.config", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.context", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.core", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.coroutine", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.date_time", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.exception", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.function", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.regex", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.smart_ptr", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.system", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.throw_exception", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.type_traits", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.utility", version = "1.83.0.bcr.1")
diff --git a/WORKSPACE.bazel b/WORKSPACE.bazel
new file mode 100644
index 0000000..be0754f
--- /dev/null
+++ b/WORKSPACE.bazel
@@ -0,0 +1 @@
+# SEE: MODULE.bazel
diff --git a/bazel_test/asio_ssl_test.cc b/bazel_test/asio_ssl_test.cc
new file mode 100644
index 0000000..163555b
--- /dev/null
+++ b/bazel_test/asio_ssl_test.cc
@@ -0,0 +1,144 @@
+// Based off of https://github.com/boostorg/asio/blob/develop/test/ssl/stream.cpp
+//
+// This test eahcks that asio SSL builds and links properly, but does
+// not meaningfully exercise its functionality.
+//
+// Copyright (c) 2003-2017 Christopher M. Kohlhoff (chris at kohlhoff dot com)
+//
+// Distributed under the Boost Software License, Version 1.0. (See accompanying
+// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
+//
+
+#include <boost/asio.hpp>
+#include <boost/asio/ssl/stream.hpp>
+
+namespace {
+    bool verify_callback(bool, boost::asio::ssl::verify_context&)
+    {
+        return false;
+    }
+
+    void handshake_handler(const boost::system::error_code&)
+    {
+    }
+
+    void buffered_handshake_handler(const boost::system::error_code&, std::size_t)
+    {
+    }
+
+    void shutdown_handler(const boost::system::error_code&)
+    {
+    }
+
+    void write_some_handler(const boost::system::error_code&, std::size_t)
+    {
+    }
+
+    void read_some_handler(const boost::system::error_code&, std::size_t)
+    {
+    }
+};
+
+int main()
+{
+    using namespace boost::asio;
+    namespace ip = boost::asio::ip;
+
+    try
+    {
+        io_context ioc;
+        char mutable_char_buffer[128] = "";
+        const char const_char_buffer[128] = "";
+        boost::asio::ssl::context context(boost::asio::ssl::context::sslv23);
+        boost::system::error_code ec;
+
+        // ssl::stream constructors.
+
+        ssl::stream<ip::tcp::socket> stream1(ioc, context);
+        ip::tcp::socket socket1(ioc, ip::tcp::v4());
+        ssl::stream<ip::tcp::socket&> stream2(socket1, context);
+
+        // basic_io_object functions.
+
+        ssl::stream<ip::tcp::socket>::executor_type ex = stream1.get_executor();
+        (void)ex;
+
+        // ssl::stream functions.
+
+        SSL* ssl1 = stream1.native_handle();
+        (void)ssl1;
+
+        ssl::stream<ip::tcp::socket>::lowest_layer_type& lowest_layer
+            = stream1.lowest_layer();
+        (void)lowest_layer;
+
+        const ssl::stream<ip::tcp::socket>& stream3 = stream1;
+        const ssl::stream<ip::tcp::socket>::lowest_layer_type& lowest_layer2
+            = stream3.lowest_layer();
+        (void)lowest_layer2;
+
+        stream1.set_verify_mode(ssl::verify_none);
+        stream1.set_verify_mode(ssl::verify_none, ec);
+
+        stream1.set_verify_depth(1);
+        stream1.set_verify_depth(1, ec);
+
+        stream1.set_verify_callback(verify_callback);
+        stream1.set_verify_callback(verify_callback, ec);
+
+        stream1.handshake(ssl::stream_base::client);
+        stream1.handshake(ssl::stream_base::server);
+        stream1.handshake(ssl::stream_base::client, ec);
+        stream1.handshake(ssl::stream_base::server, ec);
+
+        stream1.handshake(ssl::stream_base::client, buffer(mutable_char_buffer));
+        stream1.handshake(ssl::stream_base::server, buffer(mutable_char_buffer));
+        stream1.handshake(ssl::stream_base::client, buffer(const_char_buffer));
+        stream1.handshake(ssl::stream_base::server, buffer(const_char_buffer));
+        stream1.handshake(ssl::stream_base::client,
+                          buffer(mutable_char_buffer), ec);
+        stream1.handshake(ssl::stream_base::server,
+                          buffer(mutable_char_buffer), ec);
+        stream1.handshake(ssl::stream_base::client,
+                          buffer(const_char_buffer), ec);
+        stream1.handshake(ssl::stream_base::server,
+                          buffer(const_char_buffer), ec);
+
+        stream1.async_handshake(ssl::stream_base::client, handshake_handler);
+        stream1.async_handshake(ssl::stream_base::server, handshake_handler);
+
+
+        stream1.async_handshake(ssl::stream_base::client,
+                                buffer(mutable_char_buffer), buffered_handshake_handler);
+        stream1.async_handshake(ssl::stream_base::server,
+                                buffer(mutable_char_buffer), buffered_handshake_handler);
+        stream1.async_handshake(ssl::stream_base::client,
+                                buffer(const_char_buffer), buffered_handshake_handler);
+        stream1.async_handshake(ssl::stream_base::server,
+                                buffer(const_char_buffer), buffered_handshake_handler);
+
+
+        stream1.shutdown();
+        stream1.shutdown(ec);
+
+        stream1.async_shutdown(shutdown_handler);
+
+        stream1.write_some(buffer(mutable_char_buffer));
+        stream1.write_some(buffer(const_char_buffer));
+        stream1.write_some(buffer(mutable_char_buffer), ec);
+        stream1.write_some(buffer(const_char_buffer), ec);
+
+        stream1.async_write_some(buffer(mutable_char_buffer), write_some_handler);
+        stream1.async_write_some(buffer(const_char_buffer), write_some_handler);
+
+        stream1.read_some(buffer(mutable_char_buffer));
+        stream1.read_some(buffer(mutable_char_buffer), ec);
+
+        stream1.async_read_some(buffer(mutable_char_buffer), read_some_handler);
+    }
+    catch (std::exception&)
+    {
+    }
+
+    return 0;
+}
diff --git a/bazel_test/asio_test.cc b/bazel_test/asio_test.cc
new file mode 100644
index 0000000..0af21a4
--- /dev/null
+++ b/bazel_test/asio_test.cc
@@ -0,0 +1,27 @@
+// from http://www.boost.org/doc/libs/1_66_0/doc/html/boost_asio/tutorial/tuttimer1/src.html
+//
+// timer.cpp
+// ~~~~~~~~~
+//
+// Copyright (c) 2003-2017 Christopher M. Kohlhoff (chris at kohlhoff dot com)
+//
+// Distributed under the Boost Software License, Version 1.0. (See accompanying
+// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
+//
+
+#include <boost/asio.hpp>
+#include <boost/date_time/posix_time/posix_time.hpp>
+
+int main()
+{
+    boost::asio::io_context io;
+
+    auto start = std::chrono::system_clock::now();
+
+    boost::asio::deadline_timer t(io, boost::posix_time::seconds(3));
+    t.wait();
+
+    auto end = std::chrono::system_clock::now();
+
+    return std::chrono::duration_cast<std::chrono::seconds>(end - start).count() > 2 ? 0 : -1;
+}
\ No newline at end of file
diff --git a/build_asio.cpp b/build_asio.cpp
new file mode 100644
index 0000000..0e8f87a
--- /dev/null
+++ b/build_asio.cpp
@@ -0,0 +1,7 @@
+// Per
+// https://www.boost.org/doc/libs/1_72_0/doc/html/boost_asio/using.html#boost_asio.using.optional_separate_compilation,
+// exactly one file in an ASIO project using separate compilation must
+// contain the following #include. See also
+// https://github.com/nelhage/rules_boost/issues/166 and
+// https://github.com/nelhage/rules_boost/issues/170
+#include "boost/asio/impl/src.hpp"
diff --git a/build_asio_ssl.cpp b/build_asio_ssl.cpp
new file mode 100644
index 0000000..d98d7b5
--- /dev/null
+++ b/build_asio_ssl.cpp
@@ -0,0 +1 @@
+#include <boost/asio/ssl/impl/src.hpp>
