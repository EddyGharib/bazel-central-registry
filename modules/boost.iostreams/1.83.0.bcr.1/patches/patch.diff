diff --git a/BUILD.bazel b/BUILD.bazel
new file mode 100644
index 0000000..fc87eca
--- /dev/null
+++ b/BUILD.bazel
@@ -0,0 +1,29 @@
+load("@boost.rules.tools//:tools.bzl", "boost_library")
+
+boost_library(
+    name = "iostreams",
+    deps = [
+        # "@org_lzma_lzma//:lzma", # TODO
+        "@bzip2",
+        "@zlib",
+        "@zstd",
+        "@boost.assert//:assert",
+        "@boost.config//:config",
+        "@boost.core//:core",
+        "@boost.detail//:detail",
+        "@boost.function//:function",
+        "@boost.integer//:integer",
+        "@boost.iterator//:iterator",
+        "@boost.mpl//:mpl",
+        "@boost.numeric.conversion//:conversion",
+        "@boost.preprocessor//:preprocessor",
+        "@boost.random//:random",
+        "@boost.range//:range",
+        "@boost.regex//:regex",
+        "@boost.smart_ptr//:smart_ptr",
+        "@boost.static_assert//:static_assert",
+        "@boost.throw_exception//:throw_exception",
+        "@boost.type_traits//:type_traits",
+        "@boost.utility//:utility",
+    ],
+)
diff --git a/MODULE.bazel b/MODULE.bazel
new file mode 100755
index 0000000..1a6a7a6
--- /dev/null
+++ b/MODULE.bazel
@@ -0,0 +1,30 @@
+module(
+    name = "boost.iostreams",
+    version = "1.83.0.bcr.1",
+    compatibility_level = 1,
+)
+
+bazel_dep(name = "boost.rules.tools", version = "1.0.0")
+bazel_dep(name = "platforms", version = "0.0.8")
+bazel_dep(name = "bzip2", version = "1.0.8")
+bazel_dep(name = "zlib", version = "1.3")
+bazel_dep(name = "zstd", version = "1.5.5.bcr.2")
+# bazel_dep(name = "lzma??", version = "")
+bazel_dep(name = "boost.assert", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.config", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.core", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.detail", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.function", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.integer", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.iterator", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.mpl", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.numeric.conversion", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.preprocessor", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.random", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.range", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.regex", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.smart_ptr", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.static_assert", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.throw_exception", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.type_traits", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.utility", version = "1.83.0.bcr.1")
diff --git a/WORKSPACE.bazel b/WORKSPACE.bazel
new file mode 100644
index 0000000..be0754f
--- /dev/null
+++ b/WORKSPACE.bazel
@@ -0,0 +1 @@
+# SEE: MODULE.bazel
diff --git a/bazel_test/BUILD.bazel b/bazel_test/BUILD.bazel
new file mode 100644
index 0000000..f1bf3d8
--- /dev/null
+++ b/bazel_test/BUILD.bazel
@@ -0,0 +1,16 @@
+load("@boost.rules.tools//:tools.bzl", "boost_test_set")
+
+DEPS = [
+    "@boost.iostreams//:iostreams",
+]
+
+test_suite(
+    name = "tests",
+    tests = boost_test_set(
+        file_extensions = ".cc",
+        names = [
+            "iostreams_test",
+        ],
+        deps = DEPS,
+    ),
+)
diff --git a/bazel_test/iostreams_test.cc b/bazel_test/iostreams_test.cc
new file mode 100644
index 0000000..33719e3
--- /dev/null
+++ b/bazel_test/iostreams_test.cc
@@ -0,0 +1,73 @@
+#include <boost/iostreams/copy.hpp>
+#include <boost/iostreams/read.hpp>
+#include <boost/iostreams/device/back_inserter.hpp>
+#include <boost/iostreams/filter/bzip2.hpp>
+#include <boost/iostreams/filter/gzip.hpp>
+#include <boost/iostreams/filter/lzma.hpp>
+#include <boost/iostreams/filter/zlib.hpp>
+#include <boost/iostreams/filter/zstd.hpp>
+#include <boost/iostreams/filtering_stream.hpp>
+
+#include <string>
+#include <sstream>
+#include <utility>
+
+template <typename Compressor, typename Decompressor,
+          typename... CompressorArgs>
+bool test_iostream_roundtrip(CompressorArgs &&...args)
+{
+std::string original = "hello, world! this test verifies that iostreams can "
+                       "compress and decompress a string";
+  std::stringstream compressed;
+  std::stringstream uncompressed;
+
+  {
+    boost::iostreams::filtering_ostream compressed_out;
+    compressed_out.push(Compressor(std::forward<CompressorArgs>(args)...));
+    compressed_out.push(compressed);
+    boost::iostreams::write(compressed_out, original.data(), original.size());
+  }
+
+  boost::iostreams::filtering_ostream uncompressed_out;
+  uncompressed_out.push(Decompressor());
+  uncompressed_out.push(uncompressed);
+  boost::iostreams::copy(compressed, uncompressed_out);
+
+  return uncompressed.str() == original;
+}
+
+int main()
+{
+  {
+    std::string uncompressed ("hello");
+    std::string compressed;
+    std::string expected ("\x1f\x8b\x08\x00\x00\x00\x00\x00\x04\xff\xcb\x48\xcd\xc9\xc9\x07\x00\x86\xa6\x10\x36\x05\x00\x00\x00", 25);
+
+    boost::iostreams::filtering_ostream out;
+    out.push(
+        boost::iostreams::gzip_compressor(boost::iostreams::zlib::best_speed));
+    out.push(boost::iostreams::back_inserter(compressed));
+    boost::iostreams::write(out,
+                            reinterpret_cast<const char*>(uncompressed.data()),
+                            uncompressed.size());
+    boost::iostreams::close(out);
+
+    if (compressed != expected) {
+      return 1;
+    }
+  }
+
+  using namespace boost::iostreams;
+  if (!test_iostream_roundtrip<gzip_compressor, gzip_decompressor>(zlib::best_speed))
+    return 1;
+  if (!test_iostream_roundtrip<zlib_compressor, zlib_decompressor>(zlib::best_speed))
+    return 1;
+  if (!test_iostream_roundtrip<zstd_compressor, zstd_decompressor>(zstd::best_speed))
+    return 1;
+  if (!test_iostream_roundtrip<lzma_compressor, lzma_decompressor>(lzma::best_speed))
+    return 1;
+  if (!test_iostream_roundtrip<bzip2_compressor, bzip2_decompressor>())
+    return 1;
+
+  return 0;
+}
