diff --git a/BUILD.bazel b/BUILD.bazel
new file mode 100644
index 0000000..0fc946d
--- /dev/null
+++ b/BUILD.bazel
@@ -0,0 +1,9 @@
+# Hey there! Before you start modifying this file, go check out https://github.com/dynacondev/boost.rules.tools for the tool you need!
+
+load("@boost.rules.tools//:tools.bzl", "boost_library")
+
+boost_library(
+    name = "mp11",
+    deps = [
+    ],
+)
diff --git a/MODULE.bazel b/MODULE.bazel
new file mode 100755
index 0000000..eccc270
--- /dev/null
+++ b/MODULE.bazel
@@ -0,0 +1,14 @@
+"""
+Hey there! Most of this file is auto-generated by the tool at https://github.com/dynacondev/boost.rules.tools
+Go check it out to get started!
+Btw, The # Test Only section is manually edited!
+"""
+
+module(
+    name = "boost.mp11",
+    version = "1.83.0.bcr.1",
+    compatibility_level = 1,
+)
+
+bazel_dep(name = "boost.rules.tools", version = "1.0.0")
+bazel_dep(name = "platforms", version = "0.0.8")
diff --git a/WORKSPACE.bazel b/WORKSPACE.bazel
new file mode 100644
index 0000000..be0754f
--- /dev/null
+++ b/WORKSPACE.bazel
@@ -0,0 +1 @@
+# SEE: MODULE.bazel
diff --git a/bazel_test/BUILD.bazel b/bazel_test/BUILD.bazel
new file mode 100644
index 0000000..f355614
--- /dev/null
+++ b/bazel_test/BUILD.bazel
@@ -0,0 +1,16 @@
+load("@boost.rules.tools//:tools.bzl", "boost_test_set")
+
+DEPS = [
+    "@boost.mp11//:mp11",
+]
+
+test_suite(
+    name = "tests",
+    tests = boost_test_set(
+        file_extensions = ".cc",
+        names = [
+            "mp11_test",
+        ],
+        deps = DEPS,
+    ),
+)
diff --git a/bazel_test/mp11_test.cc b/bazel_test/mp11_test.cc
new file mode 100644
index 0000000..8c98f49
--- /dev/null
+++ b/bazel_test/mp11_test.cc
@@ -0,0 +1,34 @@
+#include <boost/mp11.hpp>
+#include <string>
+
+using namespace boost::mp11;
+
+struct Functor {
+
+    std::string& a;
+
+    void operator()(char) {
+        a += "char";
+    }
+
+    void operator()(int) {
+        a += "int";
+    }
+
+    void operator()(long) {
+        a += "long";
+    }
+};
+
+
+int main()
+{
+    std::string ret;
+    Functor f{ret};
+
+    using L = std::tuple<char, int, long>;
+    tuple_for_each(L(), f);
+
+    return ret == "charintlong" ? 0 : -1;
+}
+
