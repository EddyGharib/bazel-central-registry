diff --git a/BUILD.bazel b/BUILD.bazel
new file mode 100644
index 0000000..61fecd3
--- /dev/null
+++ b/BUILD.bazel
@@ -0,0 +1,50 @@
+# Hey there! Before you start modifying this file, go check out https://github.com/dynacondev/boost.rules.tools for the tool you need!
+
+load("@boost.rules.tools//:tools.bzl", "boost_library")
+
+boost_library(
+    name = "graph",
+    deps = [
+        "@boost.algorithm//:algorithm",
+        "@boost.any//:any",
+        "@boost.array//:array",
+        "@boost.assert//:assert",
+        "@boost.bimap//:bimap",
+        "@boost.bind//:bind",
+        "@boost.concept_check//:concept_check",
+        "@boost.config//:config",
+        "@boost.container_hash//:container_hash",
+        "@boost.conversion//:conversion",
+        "@boost.core//:core",
+        "@boost.detail//:detail",
+        "@boost.foreach//:foreach",
+        "@boost.function//:function",
+        "@boost.integer//:integer",
+        "@boost.iterator//:iterator",
+        "@boost.lexical_cast//:lexical_cast",
+        "@boost.math//:math",
+        "@boost.move//:move",
+        "@boost.mpl//:mpl",
+        "@boost.multi_index//:multi_index",
+        "@boost.optional//:optional",
+        "@boost.parameter//:parameter",
+        "@boost.preprocessor//:preprocessor",
+        "@boost.property_map//:property_map",
+        "@boost.property_tree//:property_tree",
+        "@boost.random//:random",
+        "@boost.range//:range",
+        "@boost.regex//:regex",
+        "@boost.serialization//:serialization",
+        "@boost.smart_ptr//:smart_ptr",
+        "@boost.spirit//:spirit",
+        "@boost.static_assert//:static_assert",
+        "@boost.throw_exception//:throw_exception",
+        "@boost.tti//:tti",
+        "@boost.tuple//:tuple",
+        "@boost.type_traits//:type_traits",
+        "@boost.typeof//:typeof",
+        "@boost.unordered//:unordered",
+        "@boost.utility//:utility",
+        "@boost.xpressive//:xpressive",
+    ],
+)
diff --git a/MODULE.bazel b/MODULE.bazel
new file mode 100755
index 0000000..1e7f0ea
--- /dev/null
+++ b/MODULE.bazel
@@ -0,0 +1,55 @@
+"""
+Hey there! Most of this file is auto-generated by the tool at https://github.com/dynacondev/boost.rules.tools
+Go check it out to get started!
+Btw, The # Test Only section is manually edited!
+"""
+
+module(
+    name = "boost.graph",
+    version = "1.83.0.bcr.1",
+    compatibility_level = 1,
+)
+
+bazel_dep(name = "boost.rules.tools", version = "1.0.0")
+bazel_dep(name = "platforms", version = "0.0.8")
+bazel_dep(name = "boost.algorithm", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.any", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.array", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.assert", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.bimap", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.bind", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.concept_check", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.config", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.container_hash", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.conversion", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.core", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.detail", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.foreach", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.function", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.integer", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.iterator", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.lexical_cast", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.math", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.move", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.mpl", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.multi_index", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.optional", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.parameter", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.preprocessor", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.property_map", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.property_tree", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.random", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.range", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.regex", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.serialization", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.smart_ptr", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.spirit", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.static_assert", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.throw_exception", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.tti", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.tuple", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.type_traits", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.typeof", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.unordered", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.utility", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.xpressive", version = "1.83.0.bcr.1")
diff --git a/WORKSPACE.bazel b/WORKSPACE.bazel
new file mode 100644
index 0000000..be0754f
--- /dev/null
+++ b/WORKSPACE.bazel
@@ -0,0 +1 @@
+# SEE: MODULE.bazel
diff --git a/bazel_test/BUILD.bazel b/bazel_test/BUILD.bazel
new file mode 100644
index 0000000..5a7041e
--- /dev/null
+++ b/bazel_test/BUILD.bazel
@@ -0,0 +1,16 @@
+load("@boost.rules.tools//:tools.bzl", "boost_test_set")
+
+DEPS = [
+    "@boost.graph//:graph",
+]
+
+test_suite(
+    name = "tests",
+    tests = boost_test_set(
+        file_extensions = ".cc",
+        names = [
+            "graph_test",
+        ],
+        deps = DEPS,
+    ),
+)
diff --git a/bazel_test/graph_test.cc b/bazel_test/graph_test.cc
new file mode 100644
index 0000000..9f959d6
--- /dev/null
+++ b/bazel_test/graph_test.cc
@@ -0,0 +1,13 @@
+#include <boost/graph/directed_graph.hpp>
+
+int main(int, char*[])
+{
+  typedef boost::directed_graph<> Graph;
+  Graph g;
+  boost::graph_traits< Graph >::vertex_descriptor v0 = g.add_vertex();
+  boost::graph_traits< Graph >::vertex_descriptor v1 = g.add_vertex();
+
+  g.add_edge(v0, v1);
+
+  return 0;
+}
