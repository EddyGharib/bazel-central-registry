diff --git a/BUILD.bazel b/BUILD.bazel
new file mode 100644
index 0000000..7c30c2c
--- /dev/null
+++ b/BUILD.bazel
@@ -0,0 +1,7 @@
+# Hey there! Before you start modifying this file, go check out https://github.com/dynacondev/boost.rules.tools for the tool you need!
+
+load("@boost.rules.tools//:tools.bzl", "boost_library")
+
+boost_library(
+    name = "callable_traits",
+)
diff --git a/MODULE.bazel b/MODULE.bazel
new file mode 100755
index 0000000..f108395
--- /dev/null
+++ b/MODULE.bazel
@@ -0,0 +1,14 @@
+"""
+Hey there! Most of this file is auto-generated by the tool at https://github.com/dynacondev/boost.rules.tools
+Go check it out to get started!
+Btw, The # Test Only section is manually edited!
+"""
+
+module(
+    name = "boost.callable_traits",
+    version = "1.83.0.bcr.1",
+    compatibility_level = 1,
+)
+
+bazel_dep(name = "boost.rules.tools", version = "1.0.0")
+bazel_dep(name = "platforms", version = "0.0.8")
diff --git a/WORKSPACE.bazel b/WORKSPACE.bazel
new file mode 100644
index 0000000..be0754f
--- /dev/null
+++ b/WORKSPACE.bazel
@@ -0,0 +1 @@
+# SEE: MODULE.bazel
diff --git a/bazel_test/BUILD.bazel b/bazel_test/BUILD.bazel
new file mode 100644
index 0000000..9d9bdbf
--- /dev/null
+++ b/bazel_test/BUILD.bazel
@@ -0,0 +1,16 @@
+load("@boost.rules.tools//:tools.bzl", "boost_test_set")
+
+DEPS = [
+    "@boost.callable_traits//:callable_traits",
+]
+
+test_suite(
+    name = "tests",
+    tests = boost_test_set(
+        file_extensions = ".cc",
+        names = [
+            "callable_traits_test",
+        ],
+        deps = DEPS,
+    ),
+)
diff --git a/bazel_test/callable_traits_test.cc b/bazel_test/callable_traits_test.cc
new file mode 100644
index 0000000..b527af4
--- /dev/null
+++ b/bazel_test/callable_traits_test.cc
@@ -0,0 +1,49 @@
+// http://www.boost.org/doc/libs/1_66_0/libs/callable_traits/doc/html/index.html
+
+#include <type_traits>
+#include <tuple>
+#include <boost/callable_traits.hpp>
+
+namespace ct = boost::callable_traits;
+
+// This function template helps keep our example code neat
+template<typename A, typename B>
+void assert_same(){ static_assert(std::is_same<A, B>::value, ""); }
+
+// foo is a function object
+struct foo {
+    void operator()(int, char, float) const {}
+};
+
+int main() {
+
+    // Use args_t to retrieve a parameter list as a std::tuple:
+    assert_same<
+        ct::args_t<foo>,
+        std::tuple<int, char, float>
+    >();
+
+    // has_void_return lets us perform a quick check for a void return type
+    static_assert(ct::has_void_return<foo>::value, "");
+
+    // Detect C-style variadics (ellipses) in a signature (e.g. printf)
+    static_assert(!ct::has_varargs<foo>::value, "");
+
+    // pmf is a pointer-to-member function: void (foo::*)(int, char, float) const
+    using pmf = decltype(&foo::operator());
+
+    // remove_member_const_t lets you remove the const member qualifier
+    assert_same<
+        ct::remove_member_const_t<pmf>,
+        void (foo::*)(int, char, float) /*no const!*/
+    >();
+
+    // Conversely, add_member_const_t adds a const member qualifier
+    assert_same<
+        pmf,
+        ct::add_member_const_t<void (foo::*)(int, char, float)>
+    >();
+
+    // is_const_member_v checks for the presence of member const
+    static_assert(ct::is_const_member<pmf>::value, "");
+}
\ No newline at end of file
