diff --git a/BUILD.bazel b/BUILD.bazel
new file mode 100644
index 0000000..0604807
--- /dev/null
+++ b/BUILD.bazel
@@ -0,0 +1,29 @@
+# Hey there! Before you start modifying this file, go check out https://github.com/dynacondev/boost.rules.tools for the tool you need!
+
+load("@boost.rules.tools//:tools.bzl", "boost_library")
+
+boost_library(
+    name = "accumulators",
+    deps = [
+        "@boost.array//:array",
+        "@boost.assert//:assert",
+        "@boost.circular_buffer//:circular_buffer",
+        "@boost.concept_check//:concept_check",
+        "@boost.config//:config",
+        "@boost.core//:core",
+        "@boost.fusion//:fusion",
+        "@boost.iterator//:iterator",
+        "@boost.mpl//:mpl",
+        "@boost.numeric.conversion//:conversion",
+        "@boost.numeric.ublas//:ublas",
+        "@boost.parameter//:parameter",
+        "@boost.preprocessor//:preprocessor",
+        "@boost.range//:range",
+        "@boost.serialization//:serialization",
+        "@boost.static_assert//:static_assert",
+        "@boost.throw_exception//:throw_exception",
+        "@boost.tuple//:tuple",
+        "@boost.type_traits//:type_traits",
+        "@boost.typeof//:typeof",
+    ],
+)
diff --git a/MODULE.bazel b/MODULE.bazel
new file mode 100755
index 0000000..69c4e9b
--- /dev/null
+++ b/MODULE.bazel
@@ -0,0 +1,38 @@
+"""
+Hey there! Most of this file is auto-generated by the tool at https://github.com/dynacondev/boost.rules.tools
+Go check it out to get started!
+Btw, The # Test Only section is manually edited!
+"""
+
+module(
+    name = "boost.accumulators",
+    version = "1.83.0.bcr.1",
+    compatibility_level = 1,
+)
+
+bazel_dep(name = "boost.rules.tools", version = "1.0.0")
+bazel_dep(name = "platforms", version = "0.0.8")
+bazel_dep(name = "boost.array", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.assert", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.circular_buffer", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.concept_check", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.config", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.core", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.fusion", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.iterator", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.mpl", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.numeric.conversion", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.numeric.ublas", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.parameter", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.preprocessor", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.range", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.serialization", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.static_assert", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.throw_exception", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.tuple", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.type_traits", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.typeof", version = "1.83.0.bcr.1")
+
+# Test Only
+bazel_dep(name = "boost.test", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.random", version = "1.83.0.bcr.1")
diff --git a/WORKSPACE.bazel b/WORKSPACE.bazel
new file mode 100644
index 0000000..be0754f
--- /dev/null
+++ b/WORKSPACE.bazel
@@ -0,0 +1 @@
+# SEE: MODULE.bazel
diff --git a/bazel_test/BUILD.bazel b/bazel_test/BUILD.bazel
new file mode 100644
index 0000000..32fe0d7
--- /dev/null
+++ b/bazel_test/BUILD.bazel
@@ -0,0 +1,16 @@
+load("@boost.rules.tools//:tools.bzl", "boost_test_set")
+
+DEPS = [
+    "@boost.accumulators//:accumulators",
+]
+
+test_suite(
+    name = "tests",
+    tests = boost_test_set(
+        file_extensions = ".cc",
+        names = [
+            "accumulators_test",
+        ],
+        deps = DEPS,
+    ),
+)
diff --git a/bazel_test/accumulators_test.cc b/bazel_test/accumulators_test.cc
new file mode 100644
index 0000000..2b7bce3
--- /dev/null
+++ b/bazel_test/accumulators_test.cc
@@ -0,0 +1,19 @@
+#include <iostream>
+#include <boost/accumulators/accumulators.hpp>
+#include <boost/accumulators/statistics/count.hpp>
+#include <boost/accumulators/statistics/mean.hpp>
+
+using namespace boost::accumulators;
+const int N = 5;
+const int M = 2;
+
+int main()
+{
+  accumulator_set<int, features<tag::count, tag::mean>> acc;
+
+  for (int i = 0; i < N; i++) {
+    acc(i);
+  }
+
+  return count(acc) == N && mean(acc) == M ? 0 : -1;
+}
diff --git a/test/BUILD.bazel b/test/BUILD.bazel
new file mode 100644
index 0000000..7391ca3
--- /dev/null
+++ b/test/BUILD.bazel
@@ -0,0 +1,421 @@
+DEPS = [
+    "@boost.accumulators//:accumulators",
+    "@boost.type_traits//:type_traits",
+    "@boost.mpl//:mpl",
+    "@boost.test//:test",
+    "@boost.random//:random",
+]
+
+test_suite(
+    name = "tests",
+    tests = [
+        ":count",
+        ":covariance",
+        ":droppable",
+        ":error_of",
+        ":extended_p_square",
+        ":extended_p_square_quantile",
+        ":external_accumulator",
+        ":external_weights",
+        ":kurtosis",
+        ":max",
+        ":mean",
+        ":median",
+        ":min",
+        ":moment",
+        ":p_square_cumul_dist",
+        ":p_square_quantile",
+        # ":p_square_quantile_extended",
+        ":pot_quantile",
+        ":reference",
+        ":rolling_count",
+        ":rolling_mean",
+        ":rolling_moment",
+        ":rolling_sum",
+        ":rolling_variance",
+        ":skewness",
+        ":sum",
+        ":sum_kahan",
+        ":tail",
+        ":tail_mean",
+        ":tail_quantile",
+        ":tail_variate_means",
+        ":valarray",
+        ":value",
+        ":variance",
+        ":vector",
+        ":weighted_covariance",
+        ":weighted_extended_p_square",
+        ":weighted_kurtosis",
+        ":weighted_mean",
+        ":weighted_median",
+        ":weighted_moment",
+        ":weighted_p_square_cumul_dist",
+        ":weighted_p_square_quantile",
+        ":weighted_pot_quantile",
+        ":weighted_skewness",
+        ":weighted_sum",
+        ":weighted_sum_kahan",
+        ":weighted_tail_mean",
+        ":weighted_tail_quantile",
+        ":weighted_tail_variate_means",
+        ":weighted_variance",
+    ],
+)
+
+cc_test(
+    name = "count",
+    size = "small",
+    srcs = ["count.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "covariance",
+    size = "small",
+    srcs = ["covariance.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "droppable",
+    size = "small",
+    srcs = ["droppable.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "error_of",
+    size = "small",
+    srcs = ["error_of.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "extended_p_square",
+    size = "small",
+    srcs = ["extended_p_square.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "extended_p_square_quantile",
+    size = "small",
+    srcs = ["extended_p_square_quantile.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "external_accumulator",
+    size = "small",
+    srcs = ["external_accumulator.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "external_weights",
+    size = "small",
+    srcs = ["external_weights.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "kurtosis",
+    size = "small",
+    srcs = ["kurtosis.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "max",
+    size = "small",
+    srcs = ["max.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "mean",
+    size = "small",
+    srcs = ["mean.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "median",
+    size = "small",
+    srcs = ["median.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "min",
+    size = "small",
+    srcs = ["min.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "moment",
+    size = "small",
+    srcs = ["moment.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "p_square_cumul_dist",
+    size = "small",
+    srcs = ["p_square_cumul_dist.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "p_square_quantile",
+    size = "small",
+    srcs = ["p_square_quantile.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "p_square_quantile_extended",
+    size = "small",
+    srcs = ["p_square_quantile_extended.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "pot_quantile",
+    size = "small",
+    srcs = ["pot_quantile.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "reference",
+    size = "small",
+    srcs = ["reference.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "rolling_count",
+    size = "small",
+    srcs = ["rolling_count.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "rolling_mean",
+    size = "small",
+    srcs = ["rolling_mean.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "rolling_moment",
+    size = "small",
+    srcs = ["rolling_moment.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "rolling_sum",
+    size = "small",
+    srcs = ["rolling_sum.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "rolling_variance",
+    size = "small",
+    srcs = ["rolling_variance.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "skewness",
+    size = "small",
+    srcs = ["skewness.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "sum",
+    size = "small",
+    srcs = ["sum.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "sum_kahan",
+    size = "small",
+    srcs = ["sum_kahan.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "tail",
+    size = "small",
+    srcs = ["tail.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "tail_mean",
+    size = "small",
+    srcs = ["tail_mean.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "tail_quantile",
+    size = "small",
+    srcs = ["tail_quantile.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "tail_variate_means",
+    size = "small",
+    srcs = ["tail_variate_means.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "valarray",
+    size = "small",
+    srcs = ["valarray.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "value",
+    size = "small",
+    srcs = ["value.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "variance",
+    size = "small",
+    srcs = ["variance.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "vector",
+    size = "small",
+    srcs = ["vector.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "weighted_covariance",
+    size = "small",
+    srcs = ["weighted_covariance.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "weighted_extended_p_square",
+    size = "small",
+    srcs = ["weighted_extended_p_square.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "weighted_kurtosis",
+    size = "small",
+    srcs = ["weighted_kurtosis.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "weighted_mean",
+    size = "small",
+    srcs = ["weighted_mean.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "weighted_median",
+    size = "small",
+    srcs = ["weighted_median.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "weighted_moment",
+    size = "small",
+    srcs = ["weighted_moment.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "weighted_p_square_cumul_dist",
+    size = "small",
+    srcs = ["weighted_p_square_cumul_dist.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "weighted_p_square_quantile",
+    size = "small",
+    srcs = ["weighted_p_square_quantile.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "weighted_pot_quantile",
+    size = "small",
+    srcs = ["weighted_pot_quantile.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "weighted_skewness",
+    size = "small",
+    srcs = ["weighted_skewness.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "weighted_sum",
+    size = "small",
+    srcs = ["weighted_sum.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "weighted_sum_kahan",
+    size = "small",
+    srcs = ["weighted_sum_kahan.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "weighted_tail_mean",
+    size = "small",
+    srcs = ["weighted_tail_mean.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "weighted_tail_quantile",
+    size = "small",
+    srcs = ["weighted_tail_quantile.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "weighted_tail_variate_means",
+    size = "small",
+    srcs = ["weighted_tail_variate_means.cpp"],
+    deps = DEPS,
+)
+
+cc_test(
+    name = "weighted_variance",
+    size = "small",
+    srcs = ["weighted_variance.cpp"],
+    deps = DEPS,
+)
