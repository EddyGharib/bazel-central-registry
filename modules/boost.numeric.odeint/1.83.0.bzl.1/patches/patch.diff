diff --git a/BUILD.bazel b/BUILD.bazel
new file mode 100644
index 0000000..2768c76
--- /dev/null
+++ b/BUILD.bazel
@@ -0,0 +1,39 @@
+load("@boost.rules.tools//:tools.bzl", "boost_library")
+
+boost_library(
+    name = "odeint",
+    linkopts = select({
+        "@platforms//os:android": ["-lm"],
+        "//conditions:default": [],
+    }),
+    deps = [
+        "@boost.array//:array",
+        "@boost.assert//:assert",
+        "@boost.bind//:bind",
+        "@boost.compute//:compute",
+        "@boost.config//:config",
+        "@boost.core//:core",
+        "@boost.function//:function",
+        "@boost.fusion//:fusion",
+        "@boost.iterator//:iterator",
+        "@boost.math//:math",
+        # There is currently a circular dependency between math and
+        # multiprecision. We know that :numeric_odeint triggers it,
+        # despite only depending directly on :math, so we include
+        # :multiprecision here. Some users of :math will need to do
+        # so as well.
+        # See: https://github.com/boostorg/math/issues/201
+        # "@boost.multiprecision//:multiprecision", #todo ??
+        "@boost.mpi//:mpi",
+        "@boost.mpl//:mpl",
+        "@boost.multi_array//:multi_array",
+        "@boost.numeric.ublas//:ublas",
+        "@boost.preprocessor//:preprocessor",
+        "@boost.range//:range",
+        "@boost.static_assert//:static_assert",
+        "@boost.throw_exception//:throw_exception",
+        "@boost.type_traits//:type_traits",
+        "@boost.units//:units",
+        "@boost.utility//:utility",
+    ],
+)
diff --git a/MODULE.bazel b/MODULE.bazel
new file mode 100755
index 0000000..d670b75
--- /dev/null
+++ b/MODULE.bazel
@@ -0,0 +1,29 @@
+module(
+    name = "boost.numeric.conversion",
+    version = "1.83.0.bzl.1",
+    compatibility_level = 1,
+)
+
+bazel_dep(name = "boost.rules.tools", version = "1.0.0")
+bazel_dep(name = "platforms", version = "0.0.8")
+bazel_dep(name = "boost.array", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.assert", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.bind", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.compute", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.config", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.core", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.function", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.fusion", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.iterator", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.math", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.mpi", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.mpl", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.multi_array", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.numeric.ublas", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.preprocessor", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.range", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.static_assert", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.throw_exception", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.type_traits", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.units", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.utility", version = "1.83.0.bzl.1")
diff --git a/WORKSPACE.bazel b/WORKSPACE.bazel
new file mode 100644
index 0000000..be0754f
--- /dev/null
+++ b/WORKSPACE.bazel
@@ -0,0 +1 @@
+# SEE: MODULE.bazel
diff --git a/bazel_test/BUILD.bazel b/bazel_test/BUILD.bazel
new file mode 100644
index 0000000..44c20cc
--- /dev/null
+++ b/bazel_test/BUILD.bazel
@@ -0,0 +1,16 @@
+load("@boost.rules.tools//:tools.bzl", "boost_test_set")
+
+DEPS = [
+    "@boost.numeric.odeint//:odeint",
+]
+
+test_suite(
+    name = "tests",
+    tests = boost_test_set(
+        file_extensions = ".cc",
+        names = [
+            "numeric_odeint_test",
+        ],
+        deps = DEPS,
+    ),
+)
diff --git a/bazel_test/numeric_odeint_test.cc b/bazel_test/numeric_odeint_test.cc
new file mode 100644
index 0000000..8744f6a
--- /dev/null
+++ b/bazel_test/numeric_odeint_test.cc
@@ -0,0 +1,25 @@
+#include <boost/numeric/odeint.hpp>
+
+typedef std::vector< double > state_type;
+
+const double gam = 0.15;
+
+void harmonic_oscillator( const state_type &x , state_type &dxdt , const double /* t */ )
+{
+    dxdt[0] = x[1];
+    dxdt[1] = -x[0] - gam*x[1];
+}
+
+int main()
+{
+  state_type x(2);
+  x[0] = 1.0; // start at x=1.0, p=0.0
+  x[1] = 0.0;  
+
+  using namespace boost::numeric::odeint;
+  size_t steps = integrate( harmonic_oscillator, x, 0.0, 10.0, 0.1 );
+  if(steps == 0)
+    return 1;
+
+  return 0;
+}
