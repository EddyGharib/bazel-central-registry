diff --git a/BUILD.bazel b/BUILD.bazel
new file mode 100644
index 0000000..584f7c5
--- /dev/null
+++ b/BUILD.bazel
@@ -0,0 +1,97 @@
+load("@boost.rules.tools//:tools.bzl", "boost_library", "default_copts", "default_defines")
+
+BOOST_LOG_DEFINES = [
+    "BOOST_LOG_WITHOUT_WCHAR_T",
+    "BOOST_LOG_USE_STD_REGEX",
+    "BOOST_LOG_WITHOUT_DEBUG_OUTPUT",
+    "BOOST_LOG_WITHOUT_EVENT_LOG",
+    "BOOST_LOG_WITHOUT_SYSLOG",
+]
+
+BOOST_LOG_DEPS = [
+    ":align",
+    ":array",
+    ":asio",
+    ":assert",
+    ":atomic",
+    ":bind",
+    ":config",
+    ":core",
+    ":date_time",
+    ":detail",
+    ":exception",
+    ":filesystem",
+    ":fusion",
+    ":interprocess",
+    ":intrusive",
+    ":io",
+    ":iterator",
+    ":lexical_cast",
+    ":move",
+    ":mpl",
+    ":optional",
+    ":parameter",
+    ":phoenix",
+    ":predef",
+    ":preprocessor",
+    ":property_tree",
+    ":proto",
+    ":random",
+    ":range",
+    ":smart_ptr",
+    ":spirit",
+    ":static_assert",
+    ":system",
+    ":thread",
+    ":throw_exception",
+    ":type_index",
+    ":type_traits",
+    ":utility",
+    ":variant",
+]
+
+cc_library(
+    name = "log_dump_ssse3",
+    srcs = ["src/dump_ssse3.cpp"] + glob(
+        ["include/boost/**"],
+    ),
+    copts = default_copts + [
+        "-msse4.2",
+    ],
+    defines = default_defines,
+    includes = [
+        "include",
+    ],
+    local_defines = BOOST_LOG_DEFINES,
+    deps = BOOST_LOG_DEPS,
+)
+
+boost_library(
+    name = "log",
+    srcs = glob([
+        "src/setup/*.hpp",
+        "src/setup/*.cpp",
+    ]) + ["libs/locale/include/boost/locale/utf.hpp"],
+    copts = select({
+        "@platforms//cpu:x86_64": [
+            "-msse4.2",
+        ],
+        "//conditions:default": [
+        ],
+    }),
+    exclude_src = [
+        "src/dump_avx2.cpp",
+        "src/dump_ssse3.cpp",
+    ],
+    includes = [
+        "src",
+    ],
+    local_defines = BOOST_LOG_DEFINES,
+    deps = BOOST_LOG_DEPS + select({
+        "@platforms//cpu:x86_64": [
+            ":log_dump_ssse3",
+        ],
+        "//conditions:default": [
+        ],
+    }),
+)
diff --git a/MODULE.bazel b/MODULE.bazel
new file mode 100755
index 0000000..3c79f15
--- /dev/null
+++ b/MODULE.bazel
@@ -0,0 +1,51 @@
+module(
+    name = "boost.log",
+    version = "1.83.0.bzl.1",
+    compatibility_level = 1,
+)
+
+bazel_dep(name = "boost.rules.tools", version = "1.0.0")
+bazel_dep(name = "platforms", version = "0.0.8")
+
+bazel_dep(name = "boost.align", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.array", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.asio", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.assert", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.atomic", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.bind", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.config", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.container", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.core", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.date_time", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.exception", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.filesystem", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.function_types", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.fusion", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.interprocess", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.intrusive", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.io", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.iterator", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.lexical_cast", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.move", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.mpl", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.optional", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.parameter", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.phoenix", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.predef", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.preprocessor", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.property_tree", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.proto", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.random", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.range", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.regex", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.smart_ptr", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.spirit", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.static_assert", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.system", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.thread", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.throw_exception", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.type_index", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.type_traits", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.utility", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.winapi", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.xpressive", version = "1.83.0.bzl.1")
diff --git a/WORKSPACE.bazel b/WORKSPACE.bazel
new file mode 100644
index 0000000..be0754f
--- /dev/null
+++ b/WORKSPACE.bazel
@@ -0,0 +1 @@
+# SEE: MODULE.bazel
diff --git a/bazel_test/BUILD.bazel b/bazel_test/BUILD.bazel
new file mode 100644
index 0000000..19aae79
--- /dev/null
+++ b/bazel_test/BUILD.bazel
@@ -0,0 +1,16 @@
+load("@boost.rules.tools//:tools.bzl", "boost_test_set")
+
+DEPS = [
+    "@boost.log//:log",
+]
+
+test_suite(
+    name = "tests",
+    tests = boost_test_set(
+        file_extensions = ".cc",
+        names = [
+            "log_test",
+        ],
+        deps = DEPS,
+    ),
+)
diff --git a/bazel_test/log_test.cc b/bazel_test/log_test.cc
new file mode 100644
index 0000000..cb1477f
--- /dev/null
+++ b/bazel_test/log_test.cc
@@ -0,0 +1,48 @@
+#include <boost/smart_ptr/shared_ptr.hpp>
+#include <boost/smart_ptr/make_shared_object.hpp>
+#include <boost/log/core.hpp>
+#include <boost/log/trivial.hpp>
+#include <boost/log/sinks/sync_frontend.hpp>
+#include <boost/log/sinks/text_ostream_backend.hpp>
+#include <boost/log/sources/logger.hpp>
+#include <boost/log/sources/record_ostream.hpp>
+#include <boost/log/utility/setup/console.hpp>
+
+#include <sstream>
+
+namespace logging = boost::log;
+namespace src = boost::log::sources;
+namespace sinks = boost::log::sinks;
+
+int main(int, char*[])
+{
+    // Construct the sink
+    typedef sinks::synchronous_sink< sinks::text_ostream_backend > text_sink;
+    boost::shared_ptr< text_sink > sink = boost::make_shared< text_sink >();
+
+    auto log_stream = boost::make_shared< std::ostringstream >();
+
+    // Add a stream to write log to
+    sink->locked_backend()->add_stream(log_stream);
+
+    // Register the sink in the logging core
+    logging::core::get()->add_sink(sink);
+
+    // Register a console log with a format, which
+    // tests our usage of log_setup library.
+    // Tests resolution of https://github.com/nelhage/rules_boost/issues/151.
+    logging::add_console_log(std::cout, boost::log::keywords::format = "*%Severity%* %Message%");
+
+    BOOST_LOG_TRIVIAL(trace) << "A trace severity message";
+    BOOST_LOG_TRIVIAL(debug) << "A debug severity message";
+    BOOST_LOG_TRIVIAL(info) << "An informational severity message";
+    BOOST_LOG_TRIVIAL(warning) << "A warning severity message";
+    BOOST_LOG_TRIVIAL(error) << "An error severity message";
+    BOOST_LOG_TRIVIAL(fatal) << "A fatal severity message";
+
+    if(log_stream->str().size() != 162)
+	return 1;
+
+    return 0;
+}
+
