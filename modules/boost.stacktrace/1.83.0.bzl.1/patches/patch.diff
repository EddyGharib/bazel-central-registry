diff --git a/BUILD.bazel b/BUILD.bazel
new file mode 100644
index 0000000..6f5945d
--- /dev/null
+++ b/BUILD.bazel
@@ -0,0 +1,63 @@
+load("@bazel_skylib//lib:selects.bzl", "selects")
+load("@boost.rules.tools//:tools.bzl", "boost_library")
+
+boost_library(
+    name = "stacktrace",
+    srcs = selects.with_or({
+        "@platforms//os:android": [
+            "src/basic.cpp",
+            #"src/noop.cpp",
+        ],
+        "@boost.rules.tools//:linux_arm": [
+            "src/basic.cpp",
+            "src/noop.cpp",
+        ],
+        "@boost.rules.tools//:linux_aarch64": [
+            "src/basic.cpp",
+            # "src/noop.cpp",
+        ],
+        "@boost.rules.tools//:linux_ppc": [
+            "src/backtrace.cpp",
+        ],
+        "@boost.rules.tools//:linux_x86_64": [
+            "src/backtrace.cpp",
+        ],
+        ("@platforms//os:osx", "@platforms//os:ios", "@platforms//os:watchos", "@platforms//os:tvos"): [
+            "src/addr2line.cpp",
+        ],
+        "@boost.rules.tools//:windows_x86_64": [
+            "src/windbg.cpp",
+            "src/windbg_cached.cpp",
+        ],
+        "//conditions:default": [],
+    }),
+    defines = selects.with_or({
+        ("@platforms//os:osx", "@platforms//os:ios", "@platforms//os:watchos", "@platforms//os:tvos"): [
+            "BOOST_STACKTRACE_GNU_SOURCE_NOT_REQUIRED",
+        ],
+        "//conditions:default": [],
+    }),
+    exclude_src = ["src/*.cpp"],
+    linkopts = select({
+        "@boost.rules.tools//:linux_ppc": [
+            "-lbacktrace -ldl",
+        ],
+        "@boost.rules.tools//:linux_x86_64": [
+            "-lbacktrace -ldl",
+        ],
+        "@boost.rules.tools//:linux_aarch64": [
+            "-lbacktrace -ldl",
+        ],
+        "//conditions:default": [],
+    }),
+    deps = [
+        "@boost.array//:array",
+        "@boost.config//:config",
+        "@boost.container_hash//:container_hash",
+        "@boost.core//:core",
+        "@boost.predef//:predef",
+        "@boost.static_assert//:static_assert",
+        "@boost.type_traits//:type_traits",
+        "@boost.winapi//:winapi",
+    ],
+)
diff --git a/MODULE.bazel b/MODULE.bazel
new file mode 100755
index 0000000..2fe87f2
--- /dev/null
+++ b/MODULE.bazel
@@ -0,0 +1,17 @@
+module(
+    name = "boost.stacktrace",
+    version = "1.83.0.bzl.1",
+    compatibility_level = 1,
+)
+
+bazel_dep(name = "boost.rules.tools", version = "1.0.0")
+bazel_dep(name = "platforms", version = "0.0.8")
+bazel_dep(name = "bazel_skylib", version = "1.5.0")
+bazel_dep(name = "boost.array", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.config", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.container_hash", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.core", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.predef", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.static_assert", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.type_traits", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.winapi", version = "1.83.0.bzl.1")
diff --git a/WORKSPACE.bazel b/WORKSPACE.bazel
new file mode 100644
index 0000000..be0754f
--- /dev/null
+++ b/WORKSPACE.bazel
@@ -0,0 +1 @@
+# SEE: MODULE.bazel
diff --git a/bazel_test/BUILD.bazel b/bazel_test/BUILD.bazel
new file mode 100644
index 0000000..0a8e3bf
--- /dev/null
+++ b/bazel_test/BUILD.bazel
@@ -0,0 +1,16 @@
+load("@boost.rules.tools//:tools.bzl", "boost_test_set")
+
+DEPS = [
+    "@boost.stacktrace//:stacktrace",
+]
+
+test_suite(
+    name = "tests",
+    tests = boost_test_set(
+        file_extensions = ".cc",
+        names = [
+            "stacktrace_test",
+        ],
+        deps = DEPS,
+    ),
+)
diff --git a/bazel_test/stacktrace_test.cc b/bazel_test/stacktrace_test.cc
new file mode 100644
index 0000000..7dddc1f
--- /dev/null
+++ b/bazel_test/stacktrace_test.cc
@@ -0,0 +1,7 @@
+#include <boost/stacktrace.hpp>
+
+int main()
+{
+  boost::stacktrace::safe_dump_to("./backtrace.dump");
+  return 0;
+}
