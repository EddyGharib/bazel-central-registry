diff --git a/BUILD.bazel b/BUILD.bazel
new file mode 100644
index 0000000..1bdaf02
--- /dev/null
+++ b/BUILD.bazel
@@ -0,0 +1,11 @@
+# Hey there! Before you start modifying this file, go check out https://github.com/dynacondev/boost.rules.tools for the tool you need!
+
+load("@boost.rules.tools//:tools.bzl", "boost_library")
+
+boost_library(
+    name = "bind",
+    deps = [
+        "@boost//:config",
+        "@boost//:core",
+    ],
+)
diff --git a/MODULE.bazel b/MODULE.bazel
new file mode 100755
index 0000000..b53dbae
--- /dev/null
+++ b/MODULE.bazel
@@ -0,0 +1,14 @@
+"""
+Hey there! Before editing, check out the tool at https://github.com/dynacondev/boost.rules.tools
+Note: These modules follow a circular dependency structure on the boost module https://github.com/dynacondev/boost.rules to keep boost releases from mixing!
+"""
+
+module(
+    name = "boost.bind",
+    version = "1.83.0.bcr.1",
+    compatibility_level = 1,
+)
+
+bazel_dep(name = "boost", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.rules.tools", version = "1.0.0")
+bazel_dep(name = "platforms", version = "0.0.8")
diff --git a/WORKSPACE.bazel b/WORKSPACE.bazel
new file mode 100644
index 0000000..be0754f
--- /dev/null
+++ b/WORKSPACE.bazel
@@ -0,0 +1 @@
+# SEE: MODULE.bazel
diff --git a/test/BUILD.bazel b/test/BUILD.bazel
new file mode 100644
index 0000000..a765a32
--- /dev/null
+++ b/test/BUILD.bazel
@@ -0,0 +1,93 @@
+load("@boost.rules.tools//:tools.bzl", "boost_test_set")
+
+DEPS = [
+    "@boost//:config",
+    "@boost//:bind",
+    "@boost//:smart_ptr",
+    "@boost//:function",
+]
+
+test_suite(
+    name = "tests",
+    tests = boost_test_set(
+        names = [
+            "apply_rv_test",
+            "apply_rv_test2",
+            "apply_test",
+            "apply_test2",
+            "arg_copy_test",
+            "bind_and_or_test",
+            "bind_cdecl_mf_test",
+            "bind_const_test",
+            "bind_cpp20_test",
+            "bind_cv_test",
+            "bind_dm_test",
+            "bind_dm2_test",
+            "bind_dm3_test",
+            "bind_eq_test",
+            "bind_eq2_test",
+            "bind_eq3_test",
+            "bind_fastcall_mf_test",
+            "bind_fastcall_test",
+            "bind_fn2_test",
+            "bind_fnobj2_test",
+            "bind_function_ap_test",
+            "bind_function_test",
+            "bind_function2_test",
+            "bind_fwd_test",
+            "bind_fwd2_test",
+            "bind_lookup_problem_test",
+            "bind_mf2_test",
+            "bind_nested_rv_test",
+            "bind_no_placeholders_test",
+            "bind_noexcept_mf_test",
+            "bind_noexcept_mf2_test",
+            "bind_noexcept_test",
+            "bind_not_test",
+            "bind_placeholder_test",
+            "bind_ref_test",
+            "bind_rel_test",
+            "bind_rv_sp_test",
+            "bind_rvalue_test",
+            "bind_stateful_test",
+            "bind_stdcall_mf_test",
+            "bind_stdcall_test",
+            "bind_test",
+            "bind_type_test",
+            "bind_unary_addr",
+            "bind_unique_ptr_test",
+            "bind_visit_test",
+            "bind_void_dm_test",
+            "bind_void_mf_test",
+            "bind_void_test",
+            "global_placeholders",
+            "mem_fn_cdecl_test",
+            "mem_fn_derived_test",
+            "mem_fn_dm_test",
+            "mem_fn_eq_test",
+            "mem_fn_fastcall_test",
+            "mem_fn_noexcept_test",
+            "mem_fn_ref_test",
+            "mem_fn_rv_test",
+            "mem_fn_stdcall_test",
+            "mem_fn_test",
+            "mem_fn_unary_addr_test",
+            "mem_fn_void_test",
+            "placeholder_const_ref_test",
+            "placeholder_std_bind_test",
+            "protect_cpp20_test",
+            "protect_test",
+            "protect_test2",
+            "quick",
+            "ref_fn_test",
+            "std_placeholders_test",
+        ],
+        deps = DEPS,
+    ) + boost_test_set(
+        expect_fail = True,
+        names = [
+            "arg_copy_fail",
+        ],
+        deps = DEPS,
+    ),
+)
