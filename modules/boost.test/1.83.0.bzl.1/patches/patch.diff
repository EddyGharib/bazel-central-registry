diff --git a/BUILD.bazel b/BUILD.bazel
new file mode 100644
index 0000000..a5d30e6
--- /dev/null
+++ b/BUILD.bazel
@@ -0,0 +1,117 @@
+load("@boost.rules.tools//:tools.bzl", "boost_library")
+
+_BOOST_TEST_DEPS = [
+    "@boost.algorithm//:algorithm",
+    "@boost.assert//:assert",
+    "@boost.bind//:bind",
+    "@boost.config//:config",
+    "@boost.core//:core",
+    "@boost.detail//:detail",
+    "@boost.exception//:exception",
+    "@boost.function//:function",
+    "@boost.io//:io",
+    "@boost.iterator//:iterator",
+    "@boost.mpl//:mpl",
+    "@boost.numeric.conversion//:conversion",
+    "@boost.optional//:optional",
+    "@boost.preprocessor//:preprocessor",
+    "@boost.smart_ptr//:smart_ptr",
+    "@boost.static_assert//:static_assert",
+    "@boost.type_traits//:type_traits",
+    "@boost.utility//:utility",
+]
+
+# An uncompiled Boost.Test library, to be used through boost/test/included/*.
+boost_library(
+    name = "test",
+    exclude_src = glob([
+        "src/*.cpp",
+    ]),
+    deps = _BOOST_TEST_DEPS,
+)
+
+# # A statically linked Boost.Test library, used through boost/test/* and without
+# # defining BOOST_TEST_DYN_LINK.
+# boost_library(
+#     name = "test.a",
+#     exclude_hdr = glob([
+#         "include/boost/test/included/*.hpp",
+#     ]),
+#     exclude_src = [
+#         "src/test_main.cpp",
+#         "src/cpp_main.cpp",
+#     ],
+#     linkstatic = True,
+#     deps = _BOOST_TEST_DEPS,
+# )
+
+# # A dynamically linked Boost.Test library, used through boost/test/*.  Bazel
+# # will add -DBOOST_TEST_DYN_LINK for you if you depend on this library.
+# boost_so_library(
+#     name = "test.so",
+#     defines = ["BOOST_TEST_DYN_LINK"],
+#     exclude_hdr = glob([
+#         "include/boost/test/included/*.hpp",
+#     ]),
+#     exclude_src = [
+#         "src/test_main.cpp",
+#         "src/cpp_main.cpp",
+#     ],
+#     deps = _BOOST_TEST_DEPS,
+# )
+
+# # Some boost libraries are not safe to use as dynamic libraries unless a
+# # BOOST_*_DYN_LINK define is set when they are compiled and included, notably
+# # Boost.Test. When the define is set, the libraries are not safe to use
+# # statically. This is an attempt to work around that. We build an explicit .so
+# # with cc_binary's linkshared=True and then we reimport it as a C++ library and
+# # expose it as a boost_library.
+
+# def boost_so_library(
+#       """
+#       """
+#         name,
+#         defines = [],
+#         includes = [],
+#         hdrs = [],
+#         srcs = [],
+#         deps = [],
+#         copts = [],
+#         exclude_hdr = [],
+#         exclude_src = [],
+#         **kwargs):
+
+#     native.cc_binary(
+#         name = "lib_internal_%s" % name,
+#         defines = default_defines + defines,
+#         includes = ["include"] + includes,
+#         srcs = hdr_list(exclude_hdr) + hdrs + srcs_list(exclude_src) + srcs,
+#         deps = deps,
+#         copts = default_copts + copts,
+#         linkshared = True,
+#         visibility = ["//visibility:private"],
+#         **kwargs
+#     )
+#     native.filegroup(
+#         name = "%s_dll_interface_file" % name,
+#         srcs = [":lib_internal_%s" % name],
+#         output_group = "interface_library",
+#         visibility = ["//visibility:private"],
+#     )
+#     native.cc_import(
+#         name = "_imported_%s" % name,
+#         shared_library = ":lib_internal_%s" % name,
+#         interface_library = ":%s_dll_interface_file" % name,
+#         visibility = ["//visibility:private"],
+#     )
+#     return boost_library(
+#         name = name,
+#         boost_name = boost_name,
+#         defines = defines,
+#         includes = includes,
+#         hdrs = hdrs,
+#         exclude_hdr = exclude_hdr,
+#         exclude_src = native.glob(["**"]),
+#         deps = deps + [":_imported_%s" % name],
+#         **kwargs
+#     )
diff --git a/MODULE.bazel b/MODULE.bazel
new file mode 100755
index 0000000..9f948c9
--- /dev/null
+++ b/MODULE.bazel
@@ -0,0 +1,26 @@
+module(
+    name = "boost.test",
+    version = "1.83.0.bzl.1",
+    compatibility_level = 1,
+)
+
+bazel_dep(name = "boost.rules.tools", version = "1.0.0")
+bazel_dep(name = "platforms", version = "0.0.8")
+bazel_dep(name = "boost.algorithm", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.assert", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.bind", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.config", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.core", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.detail", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.exception", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.function", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.io", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.iterator", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.mpl", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.numeric.conversion", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.optional", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.preprocessor", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.smart_ptr", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.static_assert", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.type_traits", version = "1.83.0.bzl.1")
+bazel_dep(name = "boost.utility", version = "1.83.0.bzl.1")
diff --git a/WORKSPACE.bazel b/WORKSPACE.bazel
new file mode 100644
index 0000000..be0754f
--- /dev/null
+++ b/WORKSPACE.bazel
@@ -0,0 +1 @@
+# SEE: MODULE.bazel
