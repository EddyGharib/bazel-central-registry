diff --git a/BUILD.bazel b/BUILD.bazel
new file mode 100644
index 0000000..d2c79d7
--- /dev/null
+++ b/BUILD.bazel
@@ -0,0 +1,104 @@
+load("@boost.rules.tools//:tools.bzl", "boost_library", "default_copts", "default_defines")
+
+_BOOST_TEST_DEPS = [
+    "@boost//:algorithm",
+    "@boost//:assert",
+    "@boost//:bind",
+    "@boost//:config",
+    "@boost//:core",
+    "@boost//:detail",
+    "@boost//:exception",
+    "@boost//:function",
+    "@boost//:io",
+    "@boost//:iterator",
+    "@boost//:mpl",
+    "@boost//:numeric.conversion",
+    "@boost//:optional",
+    "@boost//:preprocessor",
+    "@boost//:smart_ptr",
+    "@boost//:static_assert",
+    "@boost//:type_traits",
+    "@boost//:utility",
+]
+
+# An uncompiled Boost.Test library, to be used through boost/test/included/*.
+boost_library(
+    name = "test",
+    exclude_src = glob([
+        "src/*.cpp",
+    ]),
+    deps = _BOOST_TEST_DEPS,
+)
+
+# A statically linked Boost.Test library, used through boost/test/* and without
+# defining BOOST_TEST_DYN_LINK.
+boost_library(
+    name = "test.a",
+    exclude_hdr = glob([
+        "include/boost/test/included/*.hpp",
+    ]),
+    exclude_src = [
+        "src/test_main.cpp",
+        "src/cpp_main.cpp",
+    ],
+    linkstatic = True,
+    deps = _BOOST_TEST_DEPS,
+)
+
+# A dynamically linked Boost.Test library, used through boost/test/*.  Bazel
+# will add -DBOOST_TEST_DYN_LINK for you if you depend on this library.
+
+# Some boost libraries are not safe to use as dynamic libraries unless a
+# BOOST_*_DYN_LINK define is set when they are compiled and included, notably
+# Boost.Test. When the define is set, the libraries are not safe to use
+# statically. This is an attempt to work around that. We build an explicit .so
+# with cc_binary's linkshared=True and then we reimport it as a C++ library and
+# expose it as a boost_library.
+
+cc_binary(
+    name = "lib_internal_test.so",
+    srcs = glob(
+        [
+            "include/boost/**",
+            "src/*.cpp",
+        ],
+        exclude = [
+            "**/*.asm",
+            "**/*.S",
+            "**/*.doc",
+            "include/boost/test/included/*.hpp",
+            "src/test_main.cpp",
+            "src/cpp_main.cpp",
+        ],
+    ),
+    copts = default_copts,
+    defines = default_defines + ["BOOST_TEST_DYN_LINK"],
+    includes = ["include"],
+    linkshared = True,
+    visibility = ["//visibility:private"],
+    deps = _BOOST_TEST_DEPS,
+)
+
+filegroup(
+    name = "test.so_dll_interface_file",
+    srcs = [":lib_internal_test.so"],
+    output_group = "interface_library",
+    visibility = ["//visibility:private"],
+)
+
+cc_import(
+    name = "_imported_test.so",
+    interface_library = ":test.so_dll_interface_file",
+    shared_library = ":lib_internal_test.so",
+    visibility = ["//visibility:private"],
+)
+
+boost_library(
+    name = "test.so",
+    defines = ["BOOST_TEST_DYN_LINK"],
+    exclude_hdr = glob([
+        "include/boost/test/included/*.hpp",
+    ]),
+    exclude_src = glob(["**"]),
+    deps = _BOOST_TEST_DEPS + [":_imported_test.so"],
+)
diff --git a/MODULE.bazel b/MODULE.bazel
new file mode 100755
index 0000000..593688b
--- /dev/null
+++ b/MODULE.bazel
@@ -0,0 +1,14 @@
+"""
+Hey there! Before editing, check out the tool at https://github.com/dynacondev/boost.rules.tools
+Note: These modules follow a circular dependency structure on the boost module https://github.com/dynacondev/boost.rules to keep boost releases from mixing!
+"""
+
+module(
+    name = "boost.test",
+    version = "1.83.0.bcr.1",
+    compatibility_level = 1,
+)
+
+bazel_dep(name = "boost", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.rules.tools", version = "1.0.0")
+bazel_dep(name = "platforms", version = "0.0.8")
diff --git a/WORKSPACE.bazel b/WORKSPACE.bazel
new file mode 100644
index 0000000..be0754f
--- /dev/null
+++ b/WORKSPACE.bazel
@@ -0,0 +1 @@
+# SEE: MODULE.bazel
diff --git a/bazel_test/BUILD.bazel b/bazel_test/BUILD.bazel
new file mode 100644
index 0000000..06e537a
--- /dev/null
+++ b/bazel_test/BUILD.bazel
@@ -0,0 +1,19 @@
+load("@boost.rules.tools//:tools.bzl", "boost_test_set")
+
+DEPS = [
+    "@boost//:test",
+    "@boost//:test",
+]
+
+test_suite(
+    name = "tests",
+    tests = boost_test_set(
+        names = [
+            "test_dynamic_test",
+            "test_included_test",
+            "test_static_test",
+        ],
+        deps = DEPS,
+        file_extensions = ".cc",
+    ),
+)
diff --git a/bazel_test/test_dynamic_test.cc b/bazel_test/test_dynamic_test.cc
new file mode 100644
index 0000000..6dc604c
--- /dev/null
+++ b/bazel_test/test_dynamic_test.cc
@@ -0,0 +1,7 @@
+#define BOOST_TEST_MODULE boost_test
+#include <boost/test/unit_test.hpp>
+
+BOOST_AUTO_TEST_CASE( test_boost )
+{
+  BOOST_TEST( true );
+}
diff --git a/bazel_test/test_included_test.cc b/bazel_test/test_included_test.cc
new file mode 100644
index 0000000..61ee70e
--- /dev/null
+++ b/bazel_test/test_included_test.cc
@@ -0,0 +1,7 @@
+#define BOOST_TEST_MODULE boost_test
+#include <boost/test/included/unit_test.hpp>
+
+BOOST_AUTO_TEST_CASE( test_boost )
+{
+  BOOST_TEST( true );
+}
diff --git a/bazel_test/test_static_test.cc b/bazel_test/test_static_test.cc
new file mode 100644
index 0000000..6dc604c
--- /dev/null
+++ b/bazel_test/test_static_test.cc
@@ -0,0 +1,7 @@
+#define BOOST_TEST_MODULE boost_test
+#include <boost/test/unit_test.hpp>
+
+BOOST_AUTO_TEST_CASE( test_boost )
+{
+  BOOST_TEST( true );
+}
diff --git a/test/BUILD.bazel b/test/BUILD.bazel
new file mode 100644
index 0000000..4ac92cc
--- /dev/null
+++ b/test/BUILD.bazel
@@ -0,0 +1,107 @@
+load("@boost.rules.tools//:tools.bzl", "boost_test_set")
+
+DEPS = [
+    "@boost//:test",
+    "@boost//:test",
+    "@boost//:thread",
+]
+
+test_suite(
+    name = "tests",
+    tests = boost_test_set(
+        names = [
+            "cmake_test/main",
+            "execution_monitor-ts/boost_exception-test",
+            "execution_monitor-ts/custom-exception-test",
+            "execution_monitor-ts/errors-handling-test",
+            "framework-ts/check-streams-on-exit",
+            "framework-ts/decorators-datatestcase-test",
+            "framework-ts/log-count-skipped-test",
+            "framework-ts/log-formatter-test",
+            "framework-ts/master-test-suite-non-copyable-test",
+            "framework-ts/message-in-datatestcase-test",
+            "framework-ts/result-report-test",
+            "framework-ts/run-by-name-or-label-test",
+            "framework-ts/test-macro-global-fixture",
+            "framework-ts/version-uses-module-name",
+            "multithreading-ts/sync-access-test",
+            "prg_exec_monitor-ts/result-code-test",
+            "prg_exec_monitor-ts/system-exception-test",
+            "prg_exec_monitor-ts/uncatched-exception-test",
+            "prg_exec_monitor-ts/user-fatal-exception-test",
+            "selfcontained",
+            "smoke-ts/basic-smoke-test",
+            "smoke-ts/basic-smoke-test2",
+            "smoke-ts/basic-smoke-test3",
+            "smoke-ts/basic-smoke-test4",
+            "test-organization-ts/dataset-master-test-suite-accessible-test",
+            "test-organization-ts/dataset-variadic_and_move_semantic-test",
+            "test-organization-ts/datasets-test/array-test",
+            "test-organization-ts/datasets-test/collection-test",
+            "test-organization-ts/datasets-test/implicit-test",
+            "test-organization-ts/datasets-test/initializer_list-test",
+            "test-organization-ts/datasets-test/mono-grid-test",
+            "test-organization-ts/datasets-test/mono-join-test",
+            "test-organization-ts/datasets-test/mono-zip-test",
+            "test-organization-ts/datasets-test/random-test",
+            "test-organization-ts/datasets-test/seed-test",
+            "test-organization-ts/datasets-test/singleton-test",
+            "test-organization-ts/datasets-test/test_case_interface-test",
+            "test-organization-ts/datasets-test/xrange-test",
+            "test-organization-ts/parameterized_test-test",
+            "test-organization-ts/test-tree-management-test",
+            "test-organization-ts/test-tree-several-suite-decl",
+            "test-organization-ts/test_case_template-test",
+            "test-organization-ts/test_case_template-with-tuples-test",
+            "test-organization-ts/test_case_template-with-variadic-typelist",
+            "test-organization-ts/test_unit-nested-suite-dependency",
+            "test-organization-ts/test_unit-order-shuffled-test",
+            "test-organization-ts/test_unit-order-test",
+            "test-organization-ts/test_unit-report-clashing-names",
+            "test-organization-ts/test_unit-sanitize-names",
+            "test-organization-ts/test_unit-several-ts-same-name",
+            "usage-variants-ts/shared-library-custom-init-test",
+            "usage-variants-ts/shared-library-custom-main-test",
+            "usage-variants-ts/shared-library-test",
+            "usage-variants-ts/single-header-custom-init-test",
+            "usage-variants-ts/single-header-custom-main-test",
+            "usage-variants-ts/single-header-multiunit-1-test",
+            "usage-variants-ts/single-header-multiunit-2-test",
+            "usage-variants-ts/single-header-test",
+            "usage-variants-ts/static-library-custom-init-test",
+            "usage-variants-ts/static-library-test",
+            "utils-ts/algorithm-test",
+            "utils-ts/basic_cstring-test",
+            "utils-ts/class_properties-test",
+            "utils-ts/foreach-test",
+            "utils-ts/named_params-test",
+            "utils-ts/runtime-param-test",
+            "utils-ts/string_cast-test",
+            "utils-ts/token_iterator-test",
+            "writing-test-ts/assertion-construction-test",
+            "writing-test-ts/boost_check_equal-str-test",
+            "writing-test-ts/collection-comparison-test",
+            "writing-test-ts/dont_print_log_value-test",
+            "writing-test-ts/fp-comparisons-test",
+            "writing-test-ts/fp-multiprecision-comparison-test",
+            "writing-test-ts/fp-no-comparison-for-incomplete-types-test",
+            "writing-test-ts/fp-relational-operator",
+            "writing-test-ts/nullptr-support-test",
+            "writing-test-ts/output_test_stream-test",
+            "writing-test-ts/test-dataset-over-tuples",
+            "writing-test-ts/test-fixture-detect-setup-teardown-cpp11",
+            "writing-test-ts/test-fixture-detect-setup-teardown",
+            "writing-test-ts/test-timeout-fail",
+            "writing-test-ts/test-timeout-suite-fail",
+            "writing-test-ts/test-timeout-suite",
+            "writing-test-ts/test-timeout",
+            "writing-test-ts/test-with-precondition",
+            "writing-test-ts/test_tools-test",
+            "writing-test-ts/tools-debuggable-test",
+            "writing-test-ts/tools-under-debugger-test",
+            "writing-test-ts/user-defined-types-logging-customization-points",
+            "writing-test-ts/windows-headers-test",
+        ],
+        deps = DEPS,
+    ),
+)
