diff --git a/BUILD.bazel b/BUILD.bazel
new file mode 100644
index 0000000..cf5ff50
--- /dev/null
+++ b/BUILD.bazel
@@ -0,0 +1,7 @@
+# Hey there! Before you start modifying this file, go check out https://github.com/dynacondev/boost.rules.tools for the tool you need!
+
+load("@boost.rules.tools//:tools.bzl", "boost_library")
+
+boost_library(
+    name = "leaf",
+)
diff --git a/MODULE.bazel b/MODULE.bazel
new file mode 100755
index 0000000..042bf25
--- /dev/null
+++ b/MODULE.bazel
@@ -0,0 +1,14 @@
+"""
+Hey there! Most of this file is auto-generated by the tool at https://github.com/dynacondev/boost.rules.tools
+Go check it out to get started!
+Btw, The # Test Only section is manually edited!
+"""
+
+module(
+    name = "boost.leaf",
+    version = "1.83.0.bcr.1",
+    compatibility_level = 1,
+)
+
+bazel_dep(name = "boost.rules.tools", version = "1.0.0")
+bazel_dep(name = "platforms", version = "0.0.8")
diff --git a/WORKSPACE.bazel b/WORKSPACE.bazel
new file mode 100644
index 0000000..be0754f
--- /dev/null
+++ b/WORKSPACE.bazel
@@ -0,0 +1 @@
+# SEE: MODULE.bazel
diff --git a/bazel_test/BUILD.bazel b/bazel_test/BUILD.bazel
new file mode 100644
index 0000000..cc96e1c
--- /dev/null
+++ b/bazel_test/BUILD.bazel
@@ -0,0 +1,16 @@
+load("@boost.rules.tools//:tools.bzl", "boost_test_set")
+
+DEPS = [
+    "@boost.leaf//:leaf",
+]
+
+test_suite(
+    name = "tests",
+    tests = boost_test_set(
+        file_extensions = ".cc",
+        names = [
+            "leaf_test",
+        ],
+        deps = DEPS,
+    ),
+)
diff --git a/bazel_test/leaf_test.cc b/bazel_test/leaf_test.cc
new file mode 100644
index 0000000..8193d5f
--- /dev/null
+++ b/bazel_test/leaf_test.cc
@@ -0,0 +1,15 @@
+#include <boost/leaf.hpp>
+
+enum class Errors {
+  Unimplemented,
+};
+
+boost::leaf::result<int> foo() {
+  return boost::leaf::new_error(Errors::Unimplemented);
+}
+
+int main() {
+  return boost::leaf::try_handle_all(
+      foo, [](boost::leaf::match<Errors, Errors::Unimplemented>) { return 0; },
+      [](boost::leaf::error_info const &unmatched) { return 2; });
+}
