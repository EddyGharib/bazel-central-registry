diff --git a/BUILD.bazel b/BUILD.bazel
new file mode 100644
index 0000000..9c092a6
--- /dev/null
+++ b/BUILD.bazel
@@ -0,0 +1,35 @@
+# Hey there! Before you start modifying this file, go check out https://github.com/dynacondev/boost.rules.tools for the tool you need!
+
+load("@boost.rules.tools//:tools.bzl", "boost_library")
+
+boost_library(
+    name = "odeint",
+    alias_repo_name = "numeric.odeint",
+    linkopts = select({
+        "@platforms//os:android": ["-lm"],
+        "//conditions:default": [],
+    }),
+    deps = [
+        "@boost//:array",
+        "@boost//:assert",
+        "@boost//:bind",
+        "@boost//:compute",
+        "@boost//:config",
+        "@boost//:core",
+        "@boost//:function",
+        "@boost//:fusion",
+        "@boost//:iterator",
+        "@boost//:math",
+        "@boost//:mpi",
+        "@boost//:mpl",
+        "@boost//:multi_array",
+        "@boost//:numeric.ublas",
+        "@boost//:preprocessor",
+        "@boost//:range",
+        "@boost//:static_assert",
+        "@boost//:throw_exception",
+        "@boost//:type_traits",
+        "@boost//:units",
+        "@boost//:utility",
+    ],
+)
diff --git a/MODULE.bazel b/MODULE.bazel
new file mode 100755
index 0000000..377548f
--- /dev/null
+++ b/MODULE.bazel
@@ -0,0 +1,14 @@
+"""
+Hey there! Before editing, check out the tool at https://github.com/dynacondev/boost.rules.tools
+Note: These modules follow a circular dependency structure on the boost module https://github.com/dynacondev/boost.rules to keep boost releases from mixing!
+"""
+
+module(
+    name = "boost.numeric.odeint",
+    version = "1.83.0.bcr.1",
+    compatibility_level = 1,
+)
+
+bazel_dep(name = "boost", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.rules.tools", version = "1.0.0")
+bazel_dep(name = "platforms", version = "0.0.8")
diff --git a/WORKSPACE.bazel b/WORKSPACE.bazel
new file mode 100644
index 0000000..be0754f
--- /dev/null
+++ b/WORKSPACE.bazel
@@ -0,0 +1 @@
+# SEE: MODULE.bazel
diff --git a/bazel_test/BUILD.bazel b/bazel_test/BUILD.bazel
new file mode 100644
index 0000000..9040b9b
--- /dev/null
+++ b/bazel_test/BUILD.bazel
@@ -0,0 +1,16 @@
+load("@boost.rules.tools//:tools.bzl", "boost_test_set")
+
+DEPS = [
+    "@boost//:numeric.odeint",
+]
+
+test_suite(
+    name = "tests",
+    tests = boost_test_set(
+        file_extensions = ".cc",
+        names = [
+            "numeric_odeint_test",
+        ],
+        deps = DEPS,
+    ),
+)
diff --git a/bazel_test/numeric_odeint_test.cc b/bazel_test/numeric_odeint_test.cc
new file mode 100644
index 0000000..8744f6a
--- /dev/null
+++ b/bazel_test/numeric_odeint_test.cc
@@ -0,0 +1,25 @@
+#include <boost/numeric/odeint.hpp>
+
+typedef std::vector< double > state_type;
+
+const double gam = 0.15;
+
+void harmonic_oscillator( const state_type &x , state_type &dxdt , const double /* t */ )
+{
+    dxdt[0] = x[1];
+    dxdt[1] = -x[0] - gam*x[1];
+}
+
+int main()
+{
+  state_type x(2);
+  x[0] = 1.0; // start at x=1.0, p=0.0
+  x[1] = 0.0;  
+
+  using namespace boost::numeric::odeint;
+  size_t steps = integrate( harmonic_oscillator, x, 0.0, 10.0, 0.1 );
+  if(steps == 0)
+    return 1;
+
+  return 0;
+}
